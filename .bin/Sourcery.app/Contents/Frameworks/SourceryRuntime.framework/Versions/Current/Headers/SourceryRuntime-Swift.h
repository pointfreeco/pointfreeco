// Generated by Apple Swift version 4.2 (swiftlang-1000.11.37.1 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import Foundation;
@import JavaScriptCore;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="SourceryRuntime",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class TypeName;
@class Type;
@class NSCoder;

/// Describes array type
SWIFT_CLASS("_TtC15SourceryRuntime9ArrayType")
@interface ArrayType : NSObject
/// Type name used in declaration
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Array element type name
@property (nonatomic, readonly, strong) TypeName * _Nonnull elementTypeName;
/// Array element type, if known
@property (nonatomic, strong) Type * _Nullable elementType;
/// :nodoc:
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name elementTypeName:(TypeName * _Nonnull)elementTypeName elementType:(Type * _Nullable)elementType OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface ArrayType (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface ArrayType (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ArrayType (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Defines enum case associated value
SWIFT_CLASS("_TtC15SourceryRuntime15AssociatedValue")
@interface AssociatedValue : NSObject
/// Associated value local name.
/// This is a name to be used to construct enum case value
@property (nonatomic, readonly, copy) NSString * _Nullable localName;
/// Associated value external name.
/// This is a name to be used to access value in value-bindig
@property (nonatomic, readonly, copy) NSString * _Nullable externalName;
/// Associated value type name
@property (nonatomic, readonly, strong) TypeName * _Nonnull typeName;
/// Associated value type, if known
@property (nonatomic, strong) Type * _Nullable type;
/// Annotations, that were created with // sourcery: annotation1, other = “annotation value”, alterantive = 2
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nonnull annotations;
/// :nodoc:
- (nonnull instancetype)initWithLocalName:(NSString * _Nullable)localName externalName:(NSString * _Nullable)externalName typeName:(TypeName * _Nonnull)typeName type:(Type * _Nullable)type annotations:(NSDictionary<NSString *, NSObject *> * _Nonnull)annotations OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface AssociatedValue (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface AssociatedValue (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface AssociatedValue (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface AssociatedValue (SWIFT_EXTENSION(SourceryRuntime))
/// Whether type is optional. Shorthand for <code>typeName.isOptional</code>
@property (nonatomic, readonly) BOOL isOptional;
/// Whether type is implicitly unwrapped optional. Shorthand for <code>typeName.isImplicitlyUnwrappedOptional</code>
@property (nonatomic, readonly) BOOL isImplicitlyUnwrappedOptional;
/// Type name without attributes and optional type information. Shorthand for <code>typeName.unwrappedTypeName</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull unwrappedTypeName;
/// Actual type name if declaration uses typealias, otherwise just a <code>typeName</code>. Shorthand for <code>typeName.actualTypeName</code>
@property (nonatomic, readonly, strong) TypeName * _Nullable actualTypeName;
/// Whether type is a tuple. Shorthand for <code>typeName.isTuple</code>
@property (nonatomic, readonly) BOOL isTuple;
/// Whether type is a closure. Shorthand for <code>typeName.isClosure</code>
@property (nonatomic, readonly) BOOL isClosure;
/// Whether type is an array. Shorthand for <code>typeName.isArray</code>
@property (nonatomic, readonly) BOOL isArray;
/// Whether type is a dictionary. Shorthand for <code>typeName.isDictionary</code>
@property (nonatomic, readonly) BOOL isDictionary;
@end


/// Describes Swift attribute
SWIFT_CLASS("_TtC15SourceryRuntime9Attribute")
@interface Attribute : NSObject
/// Attribute name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Attribute arguments
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nonnull arguments;
/// :nodoc:
@property (nonatomic) id _Nullable __parserData;
/// :nodoc:
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name arguments:(NSDictionary<NSString *, NSObject *> * _Nonnull)arguments description:(NSString * _Nullable)description OBJC_DESIGNATED_INITIALIZER;
/// Attribute description that can be used in a template.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface Attribute (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface Attribute (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




/// :nodoc:
SWIFT_CLASS("_TtC15SourceryRuntime10BytesRange")
@interface BytesRange : NSObject
@property (nonatomic, readonly) int64_t offset;
@property (nonatomic, readonly) int64_t length;
- (nonnull instancetype)initWithOffset:(int64_t)offset length:(int64_t)length OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface BytesRange (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface BytesRange (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface BytesRange (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class Typealias;
@class Variable;
@class SwiftMethod;
@class Subscript;

/// Defines Swift type
SWIFT_CLASS("_TtC15SourceryRuntime4Type")
@interface Type : NSObject
/// :nodoc:
@property (nonatomic, copy, getter=module, setter=setModule:) NSString * _Nullable module_;
/// :nodoc:
@property (nonatomic, copy) NSDictionary<NSString *, Typealias *> * _Nonnull typealiases;
/// Whether declaration is an extension of some type
@property (nonatomic) BOOL isExtension;
/// Kind of type declaration, i.e. <code>enum</code>, <code>struct</code>, <code>class</code>, <code>protocol</code> or <code>extension</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull kind;
/// Type access level, i.e. <code>internal</code>, <code>private</code>, <code>fileprivate</code>, <code>public</code>, <code>open</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull accessLevel;
/// Type name in global scope. For inner types includes the name of its containing type, i.e. <code>Type.Inner</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Whether type is generic
@property (nonatomic) BOOL isGeneric;
/// Type name in its own scope.
@property (nonatomic, copy) NSString * _Nonnull localName;
/// Variables defined in this type only, inluding variables defined in its extensions,
/// but not including variables inherited from superclasses (for classes only) and protocols
@property (nonatomic, copy) NSArray<Variable *> * _Nonnull variables;
/// All variables defined for this type, including variables defined in extensions,
/// in superclasses (for classes only) and protocols
@property (nonatomic, readonly, copy) NSArray<Variable *> * _Nonnull allVariables;
/// Methods defined in this type only, inluding methods defined in its extensions,
/// but not including methods inherited from superclasses (for classes only) and protocols
@property (nonatomic, copy) NSArray<SwiftMethod *> * _Nonnull methods;
/// All methods defined for this type, including methods defined in extensions,
/// in superclasses (for classes only) and protocols
@property (nonatomic, readonly, copy) NSArray<SwiftMethod *> * _Nonnull allMethods;
/// Subscripts defined in this type only, inluding subscripts defined in its extensions,
/// but not including subscripts inherited from superclasses (for classes only) and protocols
@property (nonatomic, copy) NSArray<Subscript *> * _Nonnull subscripts;
/// All subscripts defined for this type, including subscripts defined in extensions,
/// in superclasses (for classes only) and protocols
@property (nonatomic, readonly, copy) NSArray<Subscript *> * _Nonnull allSubscripts;
/// Bytes position of the body of this type in its declaration file if available.
@property (nonatomic, strong) BytesRange * _Nullable bodyBytesRange;
/// All initializers defined in this type
@property (nonatomic, readonly, copy) NSArray<SwiftMethod *> * _Nonnull initializers;
/// All annotations for this type
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nonnull annotations;
/// Static variables defined in this type
@property (nonatomic, readonly, copy) NSArray<Variable *> * _Nonnull staticVariables;
/// Static methods defined in this type
@property (nonatomic, readonly, copy) NSArray<SwiftMethod *> * _Nonnull staticMethods;
/// Class methods defined in this type
@property (nonatomic, readonly, copy) NSArray<SwiftMethod *> * _Nonnull classMethods;
/// Instance variables defined in this type
@property (nonatomic, readonly, copy) NSArray<Variable *> * _Nonnull instanceVariables;
/// Instance methods defined in this type
@property (nonatomic, readonly, copy) NSArray<SwiftMethod *> * _Nonnull instanceMethods;
/// Computed instance variables defined in this type
@property (nonatomic, readonly, copy) NSArray<Variable *> * _Nonnull computedVariables;
/// Stored instance variables defined in this type
@property (nonatomic, readonly, copy) NSArray<Variable *> * _Nonnull storedVariables;
/// Names of types this type inherits from (for classes only) and protocols it implements, in order of definition
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull inheritedTypes;
/// Names of types or protocols this type inherits from, including unknown (not scanned) types
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull based;
/// Types this type inherits from (only for classes)
@property (nonatomic, copy) NSDictionary<NSString *, Type *> * _Nonnull inherits;
/// Protocols this type implements
@property (nonatomic, copy) NSDictionary<NSString *, Type *> * _Nonnull implements;
/// Contained types
@property (nonatomic, copy) NSArray<Type *> * _Nonnull containedTypes;
/// Contained types groupd by their names
@property (nonatomic, readonly, copy) NSDictionary<NSString *, Type *> * _Nonnull containedType;
/// Name of parent type (for contained types only)
@property (nonatomic, readonly, copy) NSString * _Nullable parentName;
/// Parent type, if known (for contained types only)
@property (nonatomic, strong) Type * _Nullable parent;
/// Superclass type, if known (only for classes)
@property (nonatomic, strong) Type * _Nullable supertype;
/// Type attributes, i.e. <code>@objc</code>
@property (nonatomic, copy) NSDictionary<NSString *, Attribute *> * _Nonnull attributes;
/// :nodoc:
@property (nonatomic) id _Nullable __parserData;
/// :nodoc:
@property (nonatomic, copy) NSString * _Nullable __path;
/// :nodoc:
- (void)extend:(Type * _Nonnull)type;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


/// Descibes Swift class
SWIFT_CLASS_NAMED("Class")
@interface SwiftClass : Type
/// Returns “class”
@property (nonatomic, readonly, copy) NSString * _Nonnull kind;
/// Whether type is final
@property (nonatomic, readonly) BOOL isFinal;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end






@interface SwiftClass (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface SwiftClass (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class MethodParameter;

/// Describes closure type
SWIFT_CLASS("_TtC15SourceryRuntime11ClosureType")
@interface ClosureType : NSObject
/// Type name used in declaration with stripped whitespaces and new lines
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// List of closure parameters
@property (nonatomic, readonly, copy) NSArray<MethodParameter *> * _Nonnull parameters;
/// Return value type name
@property (nonatomic, readonly, strong) TypeName * _Nonnull returnTypeName;
/// Actual return value type name if declaration uses typealias, otherwise just a <code>returnTypeName</code>
@property (nonatomic, readonly, strong) TypeName * _Nonnull actualReturnTypeName;
/// Actual return value type, if known
@property (nonatomic, strong) Type * _Nullable returnType;
/// Whether return value type is optional
@property (nonatomic, readonly) BOOL isOptionalReturnType;
/// Whether return value type is implicitly unwrapped optional
@property (nonatomic, readonly) BOOL isImplicitlyUnwrappedOptionalReturnType;
/// Return value type name without attributes and optional type information
@property (nonatomic, readonly, copy) NSString * _Nonnull unwrappedReturnTypeName;
/// Whether closure throws
@property (nonatomic, readonly) BOOL throws;
/// :nodoc:
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name parameters:(NSArray<MethodParameter *> * _Nonnull)parameters returnTypeName:(TypeName * _Nonnull)returnTypeName returnType:(Type * _Nullable)returnType throws:(BOOL)throws OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface ClosureType (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface ClosureType (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface ClosureType (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describes dictionary type
SWIFT_CLASS("_TtC15SourceryRuntime14DictionaryType")
@interface DictionaryType : NSObject
/// Type name used in declaration
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Dictionary value type name
@property (nonatomic, readonly, strong) TypeName * _Nonnull valueTypeName;
/// Dictionary value type, if known
@property (nonatomic, strong) Type * _Nullable valueType;
/// Dictionary key type name
@property (nonatomic, readonly, strong) TypeName * _Nonnull keyTypeName;
/// Dictionary key type, if known
@property (nonatomic, strong) Type * _Nullable keyType;
/// :nodoc:
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name valueTypeName:(TypeName * _Nonnull)valueTypeName valueType:(Type * _Nullable)valueType keyTypeName:(TypeName * _Nonnull)keyTypeName keyType:(Type * _Nullable)keyType OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface DictionaryType (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface DictionaryType (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface DictionaryType (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class EnumCase;

/// Defines Swift enum
SWIFT_CLASS("_TtC15SourceryRuntime4Enum")
@interface Enum : Type
/// Returns “enum”
@property (nonatomic, readonly, copy) NSString * _Nonnull kind;
/// Enum cases
@property (nonatomic, copy) NSArray<EnumCase *> * _Nonnull cases;
/// Enum raw value type name, if any
@property (nonatomic, strong) TypeName * _Nullable rawTypeName;
/// :nodoc:
@property (nonatomic, readonly) BOOL hasRawType;
/// Enum raw value type, if known
@property (nonatomic, strong) Type * _Nullable rawType;
/// Names of types or protocols this type inherits from, including unknown (not scanned) types
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull based;
/// Whether enum contains any associated values
@property (nonatomic, readonly) BOOL hasAssociatedValues;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end




@interface Enum (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface Enum (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Defines enum case
SWIFT_CLASS("_TtC15SourceryRuntime8EnumCase")
@interface EnumCase : NSObject
/// Enum case name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Enum case raw value, if any
@property (nonatomic, readonly, copy) NSString * _Nullable rawValue;
/// Enum case associated values
@property (nonatomic, readonly, copy) NSArray<AssociatedValue *> * _Nonnull associatedValues;
/// Enum case annotations
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nonnull annotations;
/// Whether enum case has associated value
@property (nonatomic, readonly) BOOL hasAssociatedValue;
/// :nodoc:
@property (nonatomic) id _Nullable __parserData;
/// :nodoc:
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name rawValue:(NSString * _Nullable)rawValue associatedValues:(NSArray<AssociatedValue *> * _Nonnull)associatedValues annotations:(NSDictionary<NSString *, NSObject *> * _Nonnull)annotations OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface EnumCase (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface EnumCase (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface EnumCase (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// :nodoc:
SWIFT_CLASS("_TtC15SourceryRuntime16FileParserResult")
@interface FileParserResult : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable path;
@property (nonatomic, readonly, copy, getter=module) NSString * _Nullable module_;
@property (nonatomic, copy) NSArray<Type *> * _Nonnull types;
@property (nonatomic, copy) NSArray<Typealias *> * _Nonnull typealiases;
@property (nonatomic, copy) NSDictionary<NSString *, NSValue *> * _Nonnull inlineRanges;
@property (nonatomic, copy) NSString * _Nullable contentSha;
@property (nonatomic, copy) NSString * _Nonnull sourceryVersion;
- (nonnull instancetype)initWithPath:(NSString * _Nullable)path module:(NSString * _Nullable)module_ types:(NSArray<Type *> * _Nonnull)types typealiases:(NSArray<Typealias *> * _Nonnull)typealiases inlineRanges:(NSDictionary<NSString *, NSValue *> * _Nonnull)inlineRanges contentSha:(NSString * _Nonnull)contentSha sourceryVersion:(NSString * _Nonnull)sourceryVersion OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface FileParserResult (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end


@interface FileParserResult (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface FileParserResult (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class GenericTypeParameter;

/// Descibes Swift generic type
SWIFT_CLASS("_TtC15SourceryRuntime11GenericType")
@interface GenericType : NSObject
/// The name of the base type, i.e. <code>Array</code> for <code>Array<Int></code>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// This generic type parameters
@property (nonatomic, readonly, copy) NSArray<GenericTypeParameter *> * _Nonnull typeParameters;
/// :nodoc:
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name typeParameters:(NSArray<GenericTypeParameter *> * _Nonnull)typeParameters OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface GenericType (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface GenericType (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface GenericType (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Descibes Swift generic type parameter
SWIFT_CLASS("_TtC15SourceryRuntime20GenericTypeParameter")
@interface GenericTypeParameter : NSObject
/// Generic parameter type name
@property (nonatomic, readonly, strong) TypeName * _Nonnull typeName;
/// Generic parameter type, if known
@property (nonatomic, strong) Type * _Nullable type;
/// :nodoc:
- (nonnull instancetype)initWithTypeName:(TypeName * _Nonnull)typeName type:(Type * _Nullable)type OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface GenericTypeParameter (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface GenericTypeParameter (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface GenericTypeParameter (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describes method
SWIFT_CLASS_NAMED("Method")
@interface SwiftMethod : NSObject
/// Full method name, including generic constraints, i.e. <code>foo<T>(bar: T)</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Method name including arguments names, i.e. <code>foo(bar:)</code>
@property (nonatomic, copy) NSString * _Nonnull selectorName;
/// Method name without arguments names and parenthesis, i.e. <code>foo<T></code>
@property (nonatomic, readonly, copy) NSString * _Nonnull shortName;
/// Method name without arguments names, parenthesis and generic types, i.e. <code>foo</code> (can be used to generate code for method call)
@property (nonatomic, readonly, copy) NSString * _Nonnull callName;
/// Method parameters
@property (nonatomic, copy) NSArray<MethodParameter *> * _Nonnull parameters;
/// Return value type name used in declaration, including generic constraints, i.e. <code>where T: Equatable</code>
@property (nonatomic, strong) TypeName * _Nonnull returnTypeName;
/// Actual return value type name if declaration uses typealias, otherwise just a <code>returnTypeName</code>
@property (nonatomic, readonly, strong) TypeName * _Nonnull actualReturnTypeName;
/// Actual return value type, if known
@property (nonatomic, strong) Type * _Nullable returnType;
/// Whether return value type is optional
@property (nonatomic, readonly) BOOL isOptionalReturnType;
/// Whether return value type is implicitly unwrapped optional
@property (nonatomic, readonly) BOOL isImplicitlyUnwrappedOptionalReturnType;
/// Return value type name without attributes and optional type information
@property (nonatomic, readonly, copy) NSString * _Nonnull unwrappedReturnTypeName;
/// Whether method throws
@property (nonatomic, readonly) BOOL throws;
/// Whether method rethrows
@property (nonatomic, readonly) BOOL rethrows;
/// Method access level, i.e. <code>internal</code>, <code>private</code>, <code>fileprivate</code>, <code>public</code>, <code>open</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull accessLevel;
/// Whether method is a static method
@property (nonatomic, readonly) BOOL isStatic;
/// Whether method is a class method
@property (nonatomic, readonly) BOOL isClass;
/// Whether method is an initializer
@property (nonatomic, readonly) BOOL isInitializer;
/// Whether method is an deinitializer
@property (nonatomic, readonly) BOOL isDeinitializer;
/// Whether method is a failable initializer
@property (nonatomic, readonly) BOOL isFailableInitializer;
/// :nodoc:
@property (nonatomic, readonly) BOOL isConvenienceInitialiser;
/// Whether method is a convenience initializer
@property (nonatomic, readonly) BOOL isConvenienceInitializer;
/// Whether method is required
@property (nonatomic, readonly) BOOL isRequired;
/// Whether method is final
@property (nonatomic, readonly) BOOL isFinal;
/// Whether method is mutating
@property (nonatomic, readonly) BOOL isMutating;
/// Whether method is generic
@property (nonatomic, readonly) BOOL isGeneric;
/// Annotations, that were created with // sourcery: annotation1, other = “annotation value”, alterantive = 2
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nonnull annotations;
/// Reference to type name where the method is defined,
/// nil if defined outside of any <code>enum</code>, <code>struct</code>, <code>class</code> etc
@property (nonatomic, readonly, strong) TypeName * _Nullable definedInTypeName;
/// Reference to actual type name where the method is defined if declaration uses typealias, otherwise just a <code>definedInTypeName</code>
@property (nonatomic, readonly, strong) TypeName * _Nullable actualDefinedInTypeName;
/// Reference to actual type where the object is defined,
/// nil if defined outside of any <code>enum</code>, <code>struct</code>, <code>class</code> etc or type is unknown
@property (nonatomic, strong) Type * _Nullable definedInType;
/// Method attributes, i.e. <code>@discardableResult</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, Attribute *> * _Nonnull attributes;
/// :nodoc:
@property (nonatomic) id _Nullable __parserData;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface SwiftMethod (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface SwiftMethod (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface SwiftMethod (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describes method parameter
SWIFT_CLASS("_TtC15SourceryRuntime15MethodParameter")
@interface MethodParameter : NSObject
/// Parameter external name
@property (nonatomic, copy) NSString * _Nullable argumentLabel;
/// Parameter internal name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Parameter type name
@property (nonatomic, readonly, strong) TypeName * _Nonnull typeName;
/// Parameter flag whether it’s inout or not
@property (nonatomic, readonly) BOOL inout;
/// Parameter type, if known
@property (nonatomic, strong) Type * _Nullable type;
/// Parameter type attributes, i.e. <code>@escaping</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, Attribute *> * _Nonnull typeAttributes;
/// Method parameter default value expression
@property (nonatomic, copy) NSString * _Nullable defaultValue;
/// Annotations, that were created with // sourcery: annotation1, other = “annotation value”, alterantive = 2
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nonnull annotations;
/// :nodoc:
@property (nonatomic) id _Nullable __parserData;
/// :nodoc:
- (nonnull instancetype)initWithArgumentLabel:(NSString * _Nullable)argumentLabel name:(NSString * _Nonnull)name typeName:(TypeName * _Nonnull)typeName type:(Type * _Nullable)type defaultValue:(NSString * _Nullable)defaultValue annotations:(NSDictionary<NSString *, NSObject *> * _Nonnull)annotations isInout:(BOOL)isInout OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name typeName:(TypeName * _Nonnull)typeName type:(Type * _Nullable)type defaultValue:(NSString * _Nullable)defaultValue annotations:(NSDictionary<NSString *, NSObject *> * _Nonnull)annotations isInout:(BOOL)isInout OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface MethodParameter (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface MethodParameter (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface MethodParameter (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface MethodParameter (SWIFT_EXTENSION(SourceryRuntime))
/// Whether type is optional. Shorthand for <code>typeName.isOptional</code>
@property (nonatomic, readonly) BOOL isOptional;
/// Whether type is implicitly unwrapped optional. Shorthand for <code>typeName.isImplicitlyUnwrappedOptional</code>
@property (nonatomic, readonly) BOOL isImplicitlyUnwrappedOptional;
/// Type name without attributes and optional type information. Shorthand for <code>typeName.unwrappedTypeName</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull unwrappedTypeName;
/// Actual type name if declaration uses typealias, otherwise just a <code>typeName</code>. Shorthand for <code>typeName.actualTypeName</code>
@property (nonatomic, readonly, strong) TypeName * _Nullable actualTypeName;
/// Whether type is a tuple. Shorthand for <code>typeName.isTuple</code>
@property (nonatomic, readonly) BOOL isTuple;
/// Whether type is a closure. Shorthand for <code>typeName.isClosure</code>
@property (nonatomic, readonly) BOOL isClosure;
/// Whether type is an array. Shorthand for <code>typeName.isArray</code>
@property (nonatomic, readonly) BOOL isArray;
/// Whether type is a dictionary. Shorthand for <code>typeName.isDictionary</code>
@property (nonatomic, readonly) BOOL isDictionary;
@end








/// Describes Swift protocol
SWIFT_CLASS("_TtC15SourceryRuntime8Protocol")
@interface Protocol : Type
/// Returns “protocol”
@property (nonatomic, readonly, copy) NSString * _Nonnull kind;
/// :nodoc:
- (void)extend:(Type * _Nonnull)type;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end






@interface Protocol (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end


@interface Protocol (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describes Swift struct
SWIFT_CLASS("_TtC15SourceryRuntime6Struct")
@interface Struct : Type
/// Returns “struct”
@property (nonatomic, readonly, copy) NSString * _Nonnull kind;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end




@interface Struct (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface Struct (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describes subscript
SWIFT_CLASS("_TtC15SourceryRuntime9Subscript")
@interface Subscript : NSObject
/// Method parameters
@property (nonatomic, copy) NSArray<MethodParameter *> * _Nonnull parameters;
/// Return value type name used in declaration, including generic constraints, i.e. <code>where T: Equatable</code>
@property (nonatomic, strong) TypeName * _Nonnull returnTypeName;
/// Actual return value type name if declaration uses typealias, otherwise just a <code>returnTypeName</code>
@property (nonatomic, readonly, strong) TypeName * _Nonnull actualReturnTypeName;
/// Actual return value type, if known
@property (nonatomic, strong) Type * _Nullable returnType;
/// Whether return value type is optional
@property (nonatomic, readonly) BOOL isOptionalReturnType;
/// Whether return value type is implicitly unwrapped optional
@property (nonatomic, readonly) BOOL isImplicitlyUnwrappedOptionalReturnType;
/// Return value type name without attributes and optional type information
@property (nonatomic, readonly, copy) NSString * _Nonnull unwrappedReturnTypeName;
/// Whether method is final
@property (nonatomic, readonly) BOOL isFinal;
/// Variable read access level, i.e. <code>internal</code>, <code>private</code>, <code>fileprivate</code>, <code>public</code>, <code>open</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull readAccess;
/// Variable write access, i.e. <code>internal</code>, <code>private</code>, <code>fileprivate</code>, <code>public</code>, <code>open</code>.
/// For immutable variables this value is empty string
@property (nonatomic, copy) NSString * _Nonnull writeAccess;
/// Whether variable is mutable or not
@property (nonatomic, readonly) BOOL isMutable;
/// Annotations, that were created with // sourcery: annotation1, other = “annotation value”, alterantive = 2
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nonnull annotations;
/// Reference to type name where the method is defined,
/// nil if defined outside of any <code>enum</code>, <code>struct</code>, <code>class</code> etc
@property (nonatomic, readonly, strong) TypeName * _Nullable definedInTypeName;
/// Reference to actual type name where the method is defined if declaration uses typealias, otherwise just a <code>definedInTypeName</code>
@property (nonatomic, readonly, strong) TypeName * _Nullable actualDefinedInTypeName;
/// Reference to actual type where the object is defined,
/// nil if defined outside of any <code>enum</code>, <code>struct</code>, <code>class</code> etc or type is unknown
@property (nonatomic, strong) Type * _Nullable definedInType;
/// Method attributes, i.e. <code>@discardableResult</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, Attribute *> * _Nonnull attributes;
/// :nodoc:
@property (nonatomic) id _Nullable __parserData;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface Subscript (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface Subscript (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface Subscript (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end

@class Types;

/// :nodoc:
SWIFT_CLASS("_TtC15SourceryRuntime15TemplateContext")
@interface TemplateContext : NSObject
@property (nonatomic, readonly, strong) Types * _Nonnull types;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSObject *> * _Nonnull arguments;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, Type *> * _Nonnull type;
- (nonnull instancetype)initWithTypes:(Types * _Nonnull)types arguments:(NSDictionary<NSString *, NSObject *> * _Nonnull)arguments OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull stencilContext;
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull jsContext;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface TemplateContext (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface TemplateContext (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface TemplateContext (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// Describes tuple type element
SWIFT_CLASS("_TtC15SourceryRuntime12TupleElement")
@interface TupleElement : NSObject
/// Tuple element name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Tuple element type name
@property (nonatomic, readonly, strong) TypeName * _Nonnull typeName;
/// Tuple element type, if known
@property (nonatomic, strong) Type * _Nullable type;
/// :nodoc:
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name typeName:(TypeName * _Nonnull)typeName type:(Type * _Nullable)type OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface TupleElement (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface TupleElement (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface TupleElement (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface TupleElement (SWIFT_EXTENSION(SourceryRuntime))
/// Whether type is optional. Shorthand for <code>typeName.isOptional</code>
@property (nonatomic, readonly) BOOL isOptional;
/// Whether type is implicitly unwrapped optional. Shorthand for <code>typeName.isImplicitlyUnwrappedOptional</code>
@property (nonatomic, readonly) BOOL isImplicitlyUnwrappedOptional;
/// Type name without attributes and optional type information. Shorthand for <code>typeName.unwrappedTypeName</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull unwrappedTypeName;
/// Actual type name if declaration uses typealias, otherwise just a <code>typeName</code>. Shorthand for <code>typeName.actualTypeName</code>
@property (nonatomic, readonly, strong) TypeName * _Nullable actualTypeName;
/// Whether type is a tuple. Shorthand for <code>typeName.isTuple</code>
@property (nonatomic, readonly) BOOL isTuple;
/// Whether type is a closure. Shorthand for <code>typeName.isClosure</code>
@property (nonatomic, readonly) BOOL isClosure;
/// Whether type is an array. Shorthand for <code>typeName.isArray</code>
@property (nonatomic, readonly) BOOL isArray;
/// Whether type is a dictionary. Shorthand for <code>typeName.isDictionary</code>
@property (nonatomic, readonly) BOOL isDictionary;
@end


/// Describes tuple type
SWIFT_CLASS("_TtC15SourceryRuntime9TupleType")
@interface TupleType : NSObject
/// Type name used in declaration
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Tuple elements
@property (nonatomic, readonly, copy) NSArray<TupleElement *> * _Nonnull elements;
/// :nodoc:
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name elements:(NSArray<TupleElement *> * _Nonnull)elements OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface TupleType (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface TupleType (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface TupleType (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end



@interface Type (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface Type (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface Type (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end




/// Describes name of the type used in typed declaration (variable, method parameter or return value etc.)
SWIFT_CLASS("_TtC15SourceryRuntime8TypeName")
@interface TypeName : NSObject
/// :nodoc:
- (nonnull instancetype)init:(NSString * _Nonnull)name actualTypeName:(TypeName * _Nullable)actualTypeName attributes:(NSDictionary<NSString *, Attribute *> * _Nonnull)attributes tuple:(TupleType * _Nullable)tuple array:(ArrayType * _Nullable)array dictionary:(DictionaryType * _Nullable)dictionary closure:(ClosureType * _Nullable)closure generic:(GenericType * _Nullable)generic OBJC_DESIGNATED_INITIALIZER;
/// Type name used in declaration
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// The generics of this TypeName
@property (nonatomic, strong) GenericType * _Nullable generic;
/// Whether this TypeName is generic
@property (nonatomic, readonly) BOOL isGeneric;
/// Actual type name if given type name is a typealias
@property (nonatomic, strong) TypeName * _Nullable actualTypeName;
/// Type name attributes, i.e. <code>@escaping</code>
@property (nonatomic, readonly, copy) NSDictionary<NSString *, Attribute *> * _Nonnull attributes;
/// Whether type is optional
@property (nonatomic, readonly) BOOL isOptional;
/// Whether type is implicitly unwrapped optional
@property (nonatomic, readonly) BOOL isImplicitlyUnwrappedOptional;
/// Type name without attributes and optional type information
@property (nonatomic, readonly, copy) NSString * _Nonnull unwrappedTypeName;
/// Whether type is void (<code>Void</code> or <code>()</code>)
@property (nonatomic, readonly) BOOL isVoid;
/// Whether type is a tuple
@property (nonatomic, readonly) BOOL isTuple;
/// Tuple type data
@property (nonatomic, strong) TupleType * _Nullable tuple;
/// Whether type is an array
@property (nonatomic, readonly) BOOL isArray;
/// Array type data
@property (nonatomic, strong) ArrayType * _Nullable array;
/// Whether type is a dictionary
@property (nonatomic, readonly) BOOL isDictionary;
/// Dictionary type data
@property (nonatomic, strong) DictionaryType * _Nullable dictionary;
/// Whether type is a closure
@property (nonatomic, readonly) BOOL isClosure;
/// Closure type data
@property (nonatomic, strong) ClosureType * _Nullable closure;
/// Returns value of <code>name</code> property.
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// :nodoc:
- (nonnull instancetype)init:(NSString * _Nonnull)description;
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull debugDescription;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface TypeName (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface TypeName (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




/// :nodoc:
SWIFT_CLASS("_TtC15SourceryRuntime9Typealias")
@interface Typealias : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull aliasName;
@property (nonatomic, readonly, strong) TypeName * _Nonnull typeName;
@property (nonatomic, strong) Type * _Nullable type;
@property (nonatomic, strong) Type * _Nullable parent;
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
- (nonnull instancetype)initWithAliasName:(NSString * _Nonnull)aliasName typeName:(TypeName * _Nonnull)typeName parent:(Type * _Nullable)parent OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface Typealias (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end


@interface Typealias (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface Typealias (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface Typealias (SWIFT_EXTENSION(SourceryRuntime))
/// Whether type is optional. Shorthand for <code>typeName.isOptional</code>
@property (nonatomic, readonly) BOOL isOptional;
/// Whether type is implicitly unwrapped optional. Shorthand for <code>typeName.isImplicitlyUnwrappedOptional</code>
@property (nonatomic, readonly) BOOL isImplicitlyUnwrappedOptional;
/// Type name without attributes and optional type information. Shorthand for <code>typeName.unwrappedTypeName</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull unwrappedTypeName;
/// Actual type name if declaration uses typealias, otherwise just a <code>typeName</code>. Shorthand for <code>typeName.actualTypeName</code>
@property (nonatomic, readonly, strong) TypeName * _Nullable actualTypeName;
/// Whether type is a tuple. Shorthand for <code>typeName.isTuple</code>
@property (nonatomic, readonly) BOOL isTuple;
/// Whether type is a closure. Shorthand for <code>typeName.isClosure</code>
@property (nonatomic, readonly) BOOL isClosure;
/// Whether type is an array. Shorthand for <code>typeName.isArray</code>
@property (nonatomic, readonly) BOOL isArray;
/// Whether type is a dictionary. Shorthand for <code>typeName.isDictionary</code>
@property (nonatomic, readonly) BOOL isDictionary;
@end

@class TypesCollection;

/// Collection of scanned types for accessing in templates
SWIFT_CLASS("_TtC15SourceryRuntime5Types")
@interface Types : NSObject
/// :nodoc:
@property (nonatomic, readonly, copy) NSArray<Type *> * _Nonnull types;
/// :nodoc:
- (nonnull instancetype)initWithTypes:(NSArray<Type *> * _Nonnull)types OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
/// :nodoc:
@property (nonatomic, readonly, copy) NSDictionary<NSString *, Type *> * _Nonnull typesByName;
/// All known types, excluding protocols
@property (nonatomic, readonly, copy) NSArray<Type *> * _Nonnull all;
/// All known protocols
@property (nonatomic, readonly, copy) NSArray<Protocol *> * _Nonnull protocols;
/// All known classes
@property (nonatomic, readonly, copy) NSArray<SwiftClass *> * _Nonnull classes;
/// All known structs
@property (nonatomic, readonly, copy) NSArray<Struct *> * _Nonnull structs;
/// All known enums
@property (nonatomic, readonly, copy) NSArray<Enum *> * _Nonnull enums;
/// All known extensions
@property (nonatomic, readonly, copy) NSArray<Type *> * _Nonnull extensions;
/// Types based on any other type, grouped by its name, even if they are not known.
/// <code>types.based.MyType</code> returns list of types based on <code>MyType</code>
@property (nonatomic, readonly, strong) TypesCollection * _Nonnull based;
/// Classes inheriting from any known class, grouped by its name.
/// <code>types.inheriting.MyClass</code> returns list of types inheriting from <code>MyClass</code>
@property (nonatomic, readonly, strong) TypesCollection * _Nonnull inheriting;
/// Types implementing known protocol, grouped by its name.
/// <code>types.implementing.MyProtocol</code> returns list of types implementing <code>MyProtocol</code>
@property (nonatomic, readonly, strong) TypesCollection * _Nonnull implementing;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface Types (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end


@interface Types (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface Types (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


/// :nodoc:
SWIFT_CLASS("_TtC15SourceryRuntime15TypesCollection")
@interface TypesCollection : NSObject
- (NSArray<Type *> * _Nullable)typesForKey:(NSString * _Nonnull)key error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// :nodoc:
- (id _Nullable)valueForKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSArray<Type *> * _Nonnull)objectForKeyedSubscript:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end




/// Defines variable
SWIFT_CLASS("_TtC15SourceryRuntime8Variable")
@interface Variable : NSObject
/// Variable name
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Variable type name
@property (nonatomic, readonly, strong) TypeName * _Nonnull typeName;
/// Variable type, if known, i.e. if the type is declared in the scanned sources.
/// For explanation, see <a href="https://cdn.rawgit.com/krzysztofzablocki/Sourcery/master/docs/writing-templates.html#what-are-em-known-em-and-em-unknown-em-types">https://cdn.rawgit.com/krzysztofzablocki/Sourcery/master/docs/writing-templates.html#what-are-em-known-em-and-em-unknown-em-types</a>
@property (nonatomic, strong) Type * _Nullable type;
/// Whether variable is computed and not stored
@property (nonatomic, readonly) BOOL isComputed;
/// Whether variable is static
@property (nonatomic, readonly) BOOL isStatic;
/// Variable read access level, i.e. <code>internal</code>, <code>private</code>, <code>fileprivate</code>, <code>public</code>, <code>open</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull readAccess;
/// Variable write access, i.e. <code>internal</code>, <code>private</code>, <code>fileprivate</code>, <code>public</code>, <code>open</code>.
/// For immutable variables this value is empty string
@property (nonatomic, readonly, copy) NSString * _Nonnull writeAccess;
/// Whether variable is mutable or not
@property (nonatomic, readonly) BOOL isMutable;
/// Variable default value expression
@property (nonatomic, copy) NSString * _Nullable defaultValue;
/// Annotations, that were created with // sourcery: annotation1, other = “annotation value”, alterantive = 2
@property (nonatomic, copy) NSDictionary<NSString *, NSObject *> * _Nonnull annotations;
/// Variable attributes, i.e. <code>@IBOutlet</code>, <code>@IBInspectable</code>
@property (nonatomic, copy) NSDictionary<NSString *, Attribute *> * _Nonnull attributes;
/// Whether variable is final or not
@property (nonatomic, readonly) BOOL isFinal;
/// Reference to type name where the variable is defined,
/// nil if defined outside of any <code>enum</code>, <code>struct</code>, <code>class</code> etc
@property (nonatomic, readonly, strong) TypeName * _Nullable definedInTypeName;
/// Reference to actual type name where the method is defined if declaration uses typealias, otherwise just a <code>definedInTypeName</code>
@property (nonatomic, readonly, strong) TypeName * _Nullable actualDefinedInTypeName;
/// Reference to actual type where the object is defined,
/// nil if defined outside of any <code>enum</code>, <code>struct</code>, <code>class</code> etc or type is unknown
@property (nonatomic, strong) Type * _Nullable definedInType;
/// :nodoc:
@property (nonatomic) id _Nullable __parserData;
/// :nodoc:
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// :nodoc:
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_DEPRECATED_MSG("-init is unavailable");
@end


@interface Variable (SWIFT_EXTENSION(SourceryRuntime)) <NSCoding>
@end




@interface Variable (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@end




@interface Variable (SWIFT_EXTENSION(SourceryRuntime))
/// :nodoc:
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
@end


@interface Variable (SWIFT_EXTENSION(SourceryRuntime))
/// Whether type is optional. Shorthand for <code>typeName.isOptional</code>
@property (nonatomic, readonly) BOOL isOptional;
/// Whether type is implicitly unwrapped optional. Shorthand for <code>typeName.isImplicitlyUnwrappedOptional</code>
@property (nonatomic, readonly) BOOL isImplicitlyUnwrappedOptional;
/// Type name without attributes and optional type information. Shorthand for <code>typeName.unwrappedTypeName</code>
@property (nonatomic, readonly, copy) NSString * _Nonnull unwrappedTypeName;
/// Actual type name if declaration uses typealias, otherwise just a <code>typeName</code>. Shorthand for <code>typeName.actualTypeName</code>
@property (nonatomic, readonly, strong) TypeName * _Nullable actualTypeName;
/// Whether type is a tuple. Shorthand for <code>typeName.isTuple</code>
@property (nonatomic, readonly) BOOL isTuple;
/// Whether type is a closure. Shorthand for <code>typeName.isClosure</code>
@property (nonatomic, readonly) BOOL isClosure;
/// Whether type is an array. Shorthand for <code>typeName.isArray</code>
@property (nonatomic, readonly) BOOL isArray;
/// Whether type is a dictionary. Shorthand for <code>typeName.isDictionary</code>
@property (nonatomic, readonly) BOOL isDictionary;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
