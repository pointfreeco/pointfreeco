import Css
import Foundation
import FunctionalCss
import Html
import HtmlUpgrade
import HttpPipeline
import Models
import PointFreeRouter
import Syndication
import Styleguide

public enum NavStyle {
  case minimal(MinimalStyle)
  case mountains(MountainsStyle)

  public enum MinimalStyle {
    case black
    case dark
    case light
  }

  public enum MountainsStyle {
    case blog
    case main

    public var heroTagline: String {
      switch self {
      case .blog: return "A blog exploring functional programming and Swift."
      case .main: return "A video series exploring functional programming and Swift."
      }
    }

    public var heroLogoSvgBase64: String {
      switch self {
      case .blog: return pointFreePointersLogoSvgBase64
      case .main: return pointFreeHeroSvgBase64
      }
    }
  }
}

public enum OpenGraphType: String {
  case website
}

public enum TwitterCard: String {
  case app
  case player
  case summary
  case summaryLargeImage = "summary_large_image"
}

public struct Flash: Codable, Equatable {
  public enum Priority: String, Codable {
    case error
    case notice
    case warning
  }

  public let priority: Priority
  public let message: String
}

public struct SimplePageLayoutData<A> {
  public enum Style {
    case minimal
    case base(NavStyle?)

    var isMinimal: Bool {
      guard case .minimal = self else { return false }
      return true
    }
  }

  public var currentRoute: Route?
  public var currentSubscriberState: SubscriberState
  public var currentUser: User?
  public var data: A
  public var description: String?
  public var extraHead: [Html.ChildOf<Html.Tag.Head>]
  public var extraStyles: Stylesheet
  public var flash: Flash?
  public var image: String?
  public var isGhosting: Bool
  public var openGraphType: OpenGraphType
  public var style: Style
  public var title: String
  public var twitterCard: TwitterCard
  public var usePrismJs: Bool

  public init(
    currentRoute: Route? = nil,
    currentSubscriberState: SubscriberState = .nonSubscriber,
    currentUser: User?,
    data: A,
    description: String? = "Point-Free is a video series exploring functional programming and Swift.",
    extraHead: [Html.ChildOf<Html.Tag.Head>] = [],
    extraStyles: Stylesheet = .empty,
    image: String? = "https://d3rccdn33rt8ze.cloudfront.net/social-assets/twitter-card-large.png",
    isGhosting: Bool = false,
    openGraphType: OpenGraphType = .website,
    style: Style = .base(.some(.minimal(.light))),
    title: String,
    twitterCard: TwitterCard = .summaryLargeImage,
    usePrismJs: Bool = false
    ) {

    self.currentRoute = currentRoute
    self.currentSubscriberState = currentSubscriberState
    self.currentUser = currentUser
    self.data = data
    self.description = description
    self.extraHead = extraHead
    self.extraStyles = extraStyles
    self.flash = nil
    self.image = image
    self.isGhosting = isGhosting
    self.openGraphType = openGraphType
    self.style = style
    self.title = title
    self.twitterCard = twitterCard
    self.usePrismJs = usePrismJs
  }
}

func _respond<A, B>(
  appSecret: AppSecret,
  cookieTransform: CookieTransform,
  view: @escaping (B) -> HtmlUpgrade.Node,
  layoutData: @escaping (A) -> SimplePageLayoutData<B>
  )
  -> Middleware<HeadersOpen, ResponseEnded, A, Data> {

    return { conn in
      let session = conn.request.session(appSecret: appSecret, cookieTransform: cookieTransform)
      var newLayoutData = layoutData(conn.data)
      newLayoutData.flash = session.flash
      newLayoutData.isGhosting = session.ghosteeId != nil

      let pageLayout = Metadata
        .create(
          description: newLayoutData.description,
          image: newLayoutData.image,
          title: newLayoutData.title,
          twitterCard: newLayoutData.twitterCard,
          twitterSite: "@pointfreeco",
          type: newLayoutData.openGraphType,
          url: newLayoutData.currentRoute.map(url(to:))
        )
        >>> metaLayout(simplePageLayout(view))
        >>> addGoogleAnalytics

      return conn
        |> writeSessionCookieMiddleware(\.flash .~ nil)
        >=> respond(
          body: Current.renderHtml(pageLayout(newLayoutData)),
          contentType: .html
      )
    }
}

extension Html.Application {
  public static var atom = Html.Application(rawValue: "atom+xml")
}

func simplePageLayout<A>(
  isTesting: Bool,
  _ contentView: @escaping (A) -> [Html.Node]
  )
  -> (SimplePageLayoutData<A>)
  -> [Html.Node] {
  let cssConfig: Css.Config = isTesting ? .pretty : .compact
  return { layoutData -> [Html.Node] in
    let blogAtomFeed = Html.link([
      href(url(to: .blog(.feed))),
      rel(.alternate),
      title("Point-Free Blog"),
      type(.application(.atom)),
      ])

    let episodeAtomFeed = Html.link([
      href(url(to: .feed(.episodes))),
      rel(.alternate),
      title("Point-Free Episodes"),
      type(.application(.atom)),
      ])

    return [
      doctype,
      html([lang(.en)], [
        head([
          meta([charset(.utf8)]),
          title(layoutData.title),
          style(unsafe: renderedNormalizeCss),
          style(styleguide, config: cssConfig),
          style(layoutData.extraStyles, config: cssConfig),
          meta(viewport: .width(.deviceWidth), .initialScale(1)),
          episodeAtomFeed,
          blogAtomFeed,
          ]
          + (layoutData.usePrismJs ? prismJsHead : [])
          + favicons
          + layoutData.extraHead
        ),
        body(
          ghosterBanner(layoutData)
            + pastDueBanner(layoutData)
            + (layoutData.flash.map(flashView) ?? [])
            + navView(layoutData)
            + contentView(layoutData.data)
            + (layoutData.style.isMinimal ? [] : footerView(user: layoutData.currentUser))
        )
        ])
    ]
  }
}

private func navView<A>(_ data: SimplePageLayoutData<A>) -> [Html.Node] {

  switch data.style {
  case let .base(.some(.mountains(style))):
    return mountainNavView(
      mountainsStyle: style,
      currentUser: data.currentUser,
      subscriberState: data.currentSubscriberState,
      currentRoute: data.currentRoute
    )

  case let .base(.some(.minimal(minimalStyle))):
    return minimalNavView(
      style: minimalStyle,
      currentUser: data.currentUser,
      subscriberState: data.currentSubscriberState,
      currentRoute: data.currentRoute
    )

  case .base(.none), .minimal:
    return []
  }
}

func pastDueBanner<A>(_ data: SimplePageLayoutData<A>) -> [Html.Node] {
  guard data.currentSubscriberState.isPastDue else { return [] }

  // TODO: custom messages for owner vs teammate

  return flashView(
    .init(
      priority: .warning,
      message: """
      Your subscription is past-due! Please
      [update your payment info](\(path(to: .account(.paymentInfo(.show))))) to ensure access to
      Point-Free!
      """
    )
  )
}

func flashView(_ flash: Flash) -> [Html.Node] {
  return [
    gridRow([`class`([flashClass(for: flash.priority)])], [
      // TODO
//      gridColumn(sizes: [.mobile: 12], [markdownBlock(flash.message)])
      ])
  ]
}

private func flashClass(for priority: Flash.Priority) -> CssSelector {
  let base = Class.type.align.center
    | Class.padding([.mobile: [.topBottom: 1]])

  switch priority {
  case .notice:
    return base
      | Class.pf.colors.fg.black
      | Class.pf.colors.bg.green
  case .warning:
    return base
      | Class.pf.colors.fg.black
      | Class.pf.colors.bg.yellow
  case .error:
    return base
      | Class.pf.colors.fg.white
      | Class.pf.colors.bg.red
  }
}

private let favicons: [Html.ChildOf<Html.Tag.Head>] = [
  link([rel(.init(rawValue: "apple-touch-icon")), .init("sizes", "180x180"), href("https://d3rccdn33rt8ze.cloudfront.net/favicons/apple-touch-icon.png")]),
  link([rel(.init(rawValue: "icon")), type(.png), .init("sizes", "32x32"), href("https://d3rccdn33rt8ze.cloudfront.net/favicons/favicon-32x32.png")]),
  link([rel(.init(rawValue: "icon")), type(.png), .init("sizes", "16x16"), href("https://d3rccdn33rt8ze.cloudfront.net/favicons/favicon-16x16.png")]),
  link([rel(.init(rawValue: "manifest")), href("https://d3rccdn33rt8ze.cloudfront.net/favicons/site.webmanifest")]),
  link([rel(.init(rawValue: "mask-icon")), href("https://d3rccdn33rt8ze.cloudfront.net/favicons/safari-pinned-tab.svg")]),
]

private func inserted<A>(meta: Metadata<A>, intoHeadOf nodes: [Html.Node]) -> [Html.Node] {

  return nodes.map { node -> Html.Node in

    switch node {
    case let .element(tag, attribs, children):
      return .element(
        tag,
        attribs,
        tag == "head"
          ? children + meta.metaNodes
          : inserted(meta: meta, intoHeadOf: children)
      )

    case .comment, .doctype, .raw, .text:
      return node
    }
  }
}

public func metaLayout<A>(_ view: @escaping (A) -> [Html.Node]) -> (Metadata<A>) -> [Html.Node] {
  return { meta in
    inserted(meta: meta, intoHeadOf: view(meta.rest))
  }
}

public struct Metadata<A> {
  public let description: String?
  public let image: String?
  public let rest: A
  public let title: String?
  public let twitterCard: TwitterCard?
  /// @username of website. Either twitter:site or twitter:site:id is required.
  public let twitterSite: String?
  public let type: OpenGraphType?
  public let url: String?

  public static func create(
    description: String? = nil,
    image: String? = nil,
    title: String? = nil,
    twitterCard: TwitterCard? = nil,
    twitterSite: String? = nil,
    type: OpenGraphType? = nil,
    url: String? = nil
    )
    -> (A) -> Metadata<A> {
      return { rest in
        .init(
          description: description,
          image: image,
          rest: rest,
          title: title,
          twitterCard: twitterCard,
          twitterSite: twitterSite,
          type: type,
          url: url
        )
      }
  }

  var metaNodes: [Html.Node] {
    return [

      self.description.map { meta(name: "description", content: $0) },
      self.description.map { meta(property: "og:description", content: $0) },
      self.description.map { meta(name: "twitter:description", content: $0) },

      self.image.map { meta(name: "twitter:image", content: $0) },
      self.image.map { meta(property: "og:image", content: $0) },

      self.title.map { meta(name: "title", content: $0) },
      self.title.map { meta(property: "og:title", content: $0) },
      self.title.map { meta(name: "twitter:title", content: $0) },

      self.type.map { meta(property: "og:type", content: $0.rawValue) },

      self.twitterCard.map { meta(name: "twitter:card", content: $0.rawValue) },
      self.twitterSite.map { meta(name: "twitter:site", content: $0) },

      self.url.map { meta(property: "og:url", content: $0) },
      self.url.map { meta(name: "twitter:url", content: $0) },

      ]
      .compactMap { $0 }
      .map { $0.rawValue }
  }
}

private let pointFreeUserSessionCookieName = "pf_session"

public enum CookieTransform: String, Codable {
  case plaintext
  case encrypted
}


extension URLRequest {
  func session(
    appSecret: AppSecret,
    cookieTransform: CookieTransform
    ) -> Session {
    return self.cookies[pointFreeUserSessionCookieName]
      .flatMap { value in
        switch cookieTransform {
        case .plaintext:
          return try? JSONDecoder().decode(Session.self, from: Data(value.utf8))
        case .encrypted:
          return Response.Header
            .verifiedValue(signedCookieValue: value, secret: appSecret.rawValue)
        }
      }
      ?? .empty
  }
}

public struct Session: Equatable {
  public var flash: Flash?
  public var user: User?

  public static let empty = Session(flash: nil, user: nil)

  public var userId: Models.User.Id? {
    switch self.user {
    case let .some(.ghosting(ghosteeId, _)):
      return ghosteeId
    case let .some(.standard(userId)):
      return userId
    case .none:
      return nil
    }
  }

  public var ghosterId: Models.User.Id? {
    switch self.user {
    case let .some(.ghosting(ghosteeId: _, ghosterId: ghosterId)):
      return ghosterId
    case .some(.standard), .none:
      return nil
    }
  }

  public var ghosteeId: Models.User.Id? {
    switch self.user {
    case let .some(.ghosting(ghosteeId: ghosteeId, ghosterId: _)):
      return ghosteeId
    case .some(.standard), .none:
      return nil
    }
  }

  public enum User: Codable, Equatable {
    case ghosting(ghosteeId: Models.User.Id, ghosterId: Models.User.Id)
    case standard(Models.User.Id)

    private enum CodingKeys: CodingKey {
      case ghosteeId
      case ghosterId
      case userId
    }

    public func encode(to encoder: Encoder) throws {
      var container = encoder.container(keyedBy: CodingKeys.self)

      switch self {
      case let .ghosting(ghosteeId, ghosterId):
        try container.encode(ghosteeId, forKey: .ghosteeId)
        try container.encode(ghosterId, forKey: .ghosterId)

      case let .standard(userId):
        try container.encode(userId, forKey: .userId)
      }
    }

    public init(from decoder: Decoder) throws {
      let container = try decoder.container(keyedBy: CodingKeys.self)
      do {
        self = .standard(try container.decode(Models.User.Id.self, forKey: .userId))
      } catch {
        self = .ghosting(
          ghosteeId: try container.decode(Models.User.Id.self, forKey: .ghosteeId),
          ghosterId: try container.decode(Models.User.Id.self, forKey: .ghosterId)
        )
      }
    }
  }
}

extension Session: Codable {
  private enum CodingKeys: CodingKey {
    case flash
    case user
    case userId
  }

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encodeIfPresent(self.flash, forKey: .flash)
    switch self.user {
    case let .some(.standard(userId)):
      try container.encode(userId, forKey: .userId)
    case .some(.ghosting):
      try container.encodeIfPresent(self.user, forKey: .user)
    case .none:
      break
    }
  }

  public init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)

    self.flash = try container.decodeIfPresent(Flash.self, forKey: .flash)
    self.user = (try? container.decode(Models.User.Id.self, forKey: .userId)).map(User.standard)
      ?? (try? container.decode(Session.User.self, forKey: .user))
      ?? .empty
  }
}

extension Session {
  public init(flash: Flash?, userId: Models.User.Id?) {
    self.flash = flash
    self.user = userId.map(Session.User.standard)
  }
}
private func base64EncodedString(_ string: String) -> String {
  return Data(string.utf8).base64EncodedString()
}

public let pointFreeHeroSvgBase64 = base64EncodedString("""
<?xml version="1.0" encoding="UTF-8"?>
<svg width="424px" height="112px" viewBox="0 0 424 112" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<g id="Page-1" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
<g id="pf-logo-hero">
<path d="M200.988627,104.717114 L200.988627,104.73986 C200.988627,108.756086 197.732832,112.011881 193.716606,112.011881 C189.700379,112.011881 186.444584,108.756086 186.444584,104.73986 L186.444584,104.717114 C186.444584,100.700888 189.700379,97.4450926 193.716606,97.4450926 C197.732832,97.4450926 200.988627,100.700888 200.988627,104.717114 Z M131.068041,7.27202183 L131.068041,7.29476709 C131.068041,11.3109939 127.812245,14.5667889 123.796019,14.5667889 C119.779792,14.5667889 116.523997,11.3109939 116.523997,7.29476709 L116.523997,7.27202183 C116.523997,3.25579507 119.779792,5.79261824e-14 123.796019,5.81721054e-14 C127.812245,5.84180283e-14 131.068041,3.25579507 131.068041,7.27202183 Z M63.3358838,65.4595691 L195.909585,65.4595691 C198.720943,65.4595691 201,67.7386257 201,70.5499844 C201,73.3613431 198.720943,75.6403997 195.909585,75.6403997 L63.3358838,75.6403997 C60.5245251,75.6403997 58.2454685,73.3613431 58.2454685,70.5499844 C58.2454685,67.7386257 60.5245251,65.4595691 63.3358838,65.4595691 Z M5.46223258,100.365274 L138.035934,100.365274 C140.847292,100.365274 143.126349,102.64433 143.126349,105.455689 C143.126349,108.267048 140.847292,110.546104 138.035934,110.546104 L5.46223258,110.546104 C2.65087385,110.546104 0.371817298,108.267048 0.371817298,105.455689 C0.371817298,102.64433 2.65087385,100.365274 5.46223258,100.365274 Z M6.99861754,30.5538643 L139.572318,30.5538643 C142.383677,30.5538643 144.662734,32.8329209 144.662734,35.6442796 C144.662734,38.4556383 142.383677,40.7346949 139.572318,40.7346949 L6.99861754,40.7346949 C4.18725881,40.7346949 1.90820226,38.4556383 1.90820226,35.6442796 C1.90820226,32.8329209 4.18725881,30.5538643 6.99861754,30.5538643 Z" id="lines" fill="#FFFFFF"></path>
<g id="Group-2" transform="translate(115.000000, 55.000000)" fill="#121212">
<path d="M7.23121318,21.5434056 L7.23121318,27.3127704 L0,27.3127704 L0,0.624552309 L10.2508407,0.624552309 C17.5217858,0.624552309 21.6141757,5.17724833 21.6141757,11.1036026 C21.6141757,17.0299569 17.5217858,21.5434056 10.2508407,21.5434056 L7.23121318,21.5434056 Z M7.23121318,15.4993091 L9.8932532,15.4993091 C13.1512723,15.4993091 14.3432305,13.6939297 14.3432305,11.1036026 C14.3432305,8.51327559 13.1512723,6.66864875 9.8932532,6.66864875 L7.23121318,6.66864875 L7.23121318,15.4993091 Z M40.4698195,27.6659968 C32.6823591,27.6659968 25.9676612,22.0143741 25.9676612,13.9686613 C25.9676612,5.92294854 32.6823591,0.310573273 40.4698195,0.310573273 C48.2572798,0.310573273 54.9719778,5.92294854 54.9719778,13.9686613 C54.9719778,22.0143741 48.2572798,27.6659968 40.4698195,27.6659968 Z M40.4698195,21.4649108 C44.9992607,21.4649108 47.5818368,18.1681309 47.5818368,13.9686613 C47.5818368,9.76919173 44.9992607,6.51165924 40.4698195,6.51165924 C35.9403782,6.51165924 33.3578021,9.76919173 33.3578021,13.9686613 C33.3578021,18.1681309 35.9403782,21.4649108 40.4698195,21.4649108 Z M60.6366173,27.3127704 L67.8678305,27.3127704 L67.8678305,0.624552309 L60.6366173,0.624552309 L60.6366173,27.3127704 Z M98.6033245,27.7837389 C99.0403759,28.1369653 99.1595717,28.0192232 99.1595717,27.7052442 L99.1595717,0.624552309 L92.3654098,0.624552309 L92.3654098,14.0079087 L75.3998712,0.192831135 C74.9628199,-0.160395281 74.843624,0.0358416168 74.843624,0.271325894 L74.843624,27.3127704 L81.6377859,27.3127704 L81.6377859,14.0079087 L98.6033245,27.7837389 Z M111.697837,27.3127704 L118.92905,27.3127704 L118.92905,6.62940137 L126.080799,6.62940137 L126.080799,0.624552309 L104.546088,0.624552309 L104.546088,6.62940137 L111.697837,6.62940137 L111.697837,27.3127704 Z M131.427583,20.758458 C134.208819,20.758458 136.711932,18.48211 136.711932,15.5385565 C136.711932,12.5557557 134.208819,10.318655 131.427583,10.318655 C128.646348,10.318655 126.143235,12.5557557 126.143235,15.5385565 C126.143235,18.48211 128.646348,20.758458 131.427583,20.758458 Z M142.177911,27.3127704 L149.409125,27.3127704 L149.409125,18.8353364 L159.222914,18.8353364 L159.222914,12.8304873 L149.409125,12.8304873 L149.409125,6.62940137 L160.534068,6.62940137 L160.534068,0.624552309 L142.177911,0.624552309 L142.177911,27.3127704 Z M182.965586,19.7380261 L187.773151,27.3127704 L179.945959,27.3127704 L176.171424,21.1901792 L173.469653,21.1901792 L173.469653,27.3127704 L166.238439,27.3127704 L166.238439,0.624552309 L176.48928,0.624552309 C183.760225,0.624552309 187.852615,5.17724833 187.852615,11.1036026 C187.852615,14.9498458 186.144142,18.0111414 182.965586,19.7380261 Z M173.469653,15.4993091 L176.131693,15.4993091 C179.389712,15.4993091 180.58167,13.6939297 180.58167,11.1036026 C180.58167,8.51327559 179.389712,6.66864875 176.131693,6.66864875 L173.469653,6.66864875 L173.469653,15.4993091 Z M193.358327,27.3127704 L212.86671,27.3127704 L212.86671,21.3079213 L200.58954,21.3079213 L200.58954,18.5213574 L210.363597,18.5213574 L210.363597,12.8304873 L200.58954,12.8304873 L200.58954,6.62940137 L212.310462,6.62940137 L212.310462,0.624552309 L193.358327,0.624552309 L193.358327,27.3127704 Z M218.491617,27.3127704 L238,27.3127704 L238,21.3079213 L225.72283,21.3079213 L225.72283,18.5213574 L235.496888,18.5213574 L235.496888,12.8304873 L225.72283,12.8304873 L225.72283,6.62940137 L237.443753,6.62940137 L237.443753,0.624552309 L218.491617,0.624552309 L218.491617,27.3127704 Z" id="logo"></path>
</g>
<rect id="bounds" fill-opacity="0" fill="#FFFFFF" x="0" y="0" width="495" height="113"></rect>
</g>
</g>
</svg>
""")


public let pointFreePointersLogoSvgBase64 = base64EncodedString("""
<?xml version="1.0" encoding="UTF-8"?>
<svg width="448px" height="138px" viewBox="0 0 448 138" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<defs>
<rect id="path-1" x="0" y="0" width="450" height="155"></rect>
</defs>
<g id="Pointers" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
<g id="pfp-logo">
<mask id="mask-2" fill="white">
<use xlink:href="#path-1"></use>
</mask>
<use id="Mask" fill-opacity="0" fill="#D8D8D8" xlink:href="#path-1"></use>
<path d="M200.988627,104.717114 L200.988627,104.73986 C200.988627,108.756086 197.732832,112.011881 193.716606,112.011881 C189.700379,112.011881 186.444584,108.756086 186.444584,104.73986 L186.444584,104.717114 C186.444584,100.700888 189.700379,97.4450926 193.716606,97.4450926 C197.732832,97.4450926 200.988627,100.700888 200.988627,104.717114 Z M131.068041,7.27202183 L131.068041,7.29476709 C131.068041,11.3109939 127.812245,14.5667889 123.796019,14.5667889 C119.779792,14.5667889 116.523997,11.3109939 116.523997,7.29476709 L116.523997,7.27202183 C116.523997,3.25579507 119.779792,5.79261824e-14 123.796019,5.81721054e-14 C127.812245,5.84180283e-14 131.068041,3.25579507 131.068041,7.27202183 Z M63.3358838,65.4595691 L195.909585,65.4595691 C198.720943,65.4595691 201,67.7386257 201,70.5499844 C201,73.3613431 198.720943,75.6403997 195.909585,75.6403997 L63.3358838,75.6403997 C60.5245251,75.6403997 58.2454685,73.3613431 58.2454685,70.5499844 C58.2454685,67.7386257 60.5245251,65.4595691 63.3358838,65.4595691 Z M5.46223258,100.365274 L138.035934,100.365274 C140.847292,100.365274 143.126349,102.64433 143.126349,105.455689 C143.126349,108.267048 140.847292,110.546104 138.035934,110.546104 L5.46223258,110.546104 C2.65087385,110.546104 0.371817298,108.267048 0.371817298,105.455689 C0.371817298,102.64433 2.65087385,100.365274 5.46223258,100.365274 Z M6.99861754,30.5538643 L139.572318,30.5538643 C142.383677,30.5538643 144.662734,32.8329209 144.662734,35.6442796 C144.662734,38.4556383 142.383677,40.7346949 139.572318,40.7346949 L6.99861754,40.7346949 C4.18725881,40.7346949 1.90820226,38.4556383 1.90820226,35.6442796 C1.90820226,32.8329209 4.18725881,30.5538643 6.99861754,30.5538643 Z" id="lines" fill="#FFFFFF" mask="url(#mask-2)"></path>
<g id="Group-2" mask="url(#mask-2)" fill="#121212">
<g transform="translate(115.000000, 55.000000)" id="logo">
<path d="M7.23121318,21.5434056 L7.23121318,27.3127704 L0,27.3127704 L0,0.624552309 L10.2508407,0.624552309 C17.5217858,0.624552309 21.6141757,5.17724833 21.6141757,11.1036026 C21.6141757,17.0299569 17.5217858,21.5434056 10.2508407,21.5434056 L7.23121318,21.5434056 Z M7.23121318,15.4993091 L9.8932532,15.4993091 C13.1512723,15.4993091 14.3432305,13.6939297 14.3432305,11.1036026 C14.3432305,8.51327559 13.1512723,6.66864875 9.8932532,6.66864875 L7.23121318,6.66864875 L7.23121318,15.4993091 Z M40.4698195,27.6659968 C32.6823591,27.6659968 25.9676612,22.0143741 25.9676612,13.9686613 C25.9676612,5.92294854 32.6823591,0.310573273 40.4698195,0.310573273 C48.2572798,0.310573273 54.9719778,5.92294854 54.9719778,13.9686613 C54.9719778,22.0143741 48.2572798,27.6659968 40.4698195,27.6659968 Z M40.4698195,21.4649108 C44.9992607,21.4649108 47.5818368,18.1681309 47.5818368,13.9686613 C47.5818368,9.76919173 44.9992607,6.51165924 40.4698195,6.51165924 C35.9403782,6.51165924 33.3578021,9.76919173 33.3578021,13.9686613 C33.3578021,18.1681309 35.9403782,21.4649108 40.4698195,21.4649108 Z M60.6366173,27.3127704 L67.8678305,27.3127704 L67.8678305,0.624552309 L60.6366173,0.624552309 L60.6366173,27.3127704 Z M98.6033245,27.7837389 C99.0403759,28.1369653 99.1595717,28.0192232 99.1595717,27.7052442 L99.1595717,0.624552309 L92.3654098,0.624552309 L92.3654098,14.0079087 L75.3998712,0.192831135 C74.9628199,-0.160395281 74.843624,0.0358416168 74.843624,0.271325894 L74.843624,27.3127704 L81.6377859,27.3127704 L81.6377859,14.0079087 L98.6033245,27.7837389 Z M111.697837,27.3127704 L118.92905,27.3127704 L118.92905,6.62940137 L126.080799,6.62940137 L126.080799,0.624552309 L104.546088,0.624552309 L104.546088,6.62940137 L111.697837,6.62940137 L111.697837,27.3127704 Z M131.427583,20.758458 C134.208819,20.758458 136.711932,18.48211 136.711932,15.5385565 C136.711932,12.5557557 134.208819,10.318655 131.427583,10.318655 C128.646348,10.318655 126.143235,12.5557557 126.143235,15.5385565 C126.143235,18.48211 128.646348,20.758458 131.427583,20.758458 Z M142.177911,27.3127704 L149.409125,27.3127704 L149.409125,18.8353364 L159.222914,18.8353364 L159.222914,12.8304873 L149.409125,12.8304873 L149.409125,6.62940137 L160.534068,6.62940137 L160.534068,0.624552309 L142.177911,0.624552309 L142.177911,27.3127704 Z M182.965586,19.7380261 L187.773151,27.3127704 L179.945959,27.3127704 L176.171424,21.1901792 L173.469653,21.1901792 L173.469653,27.3127704 L166.238439,27.3127704 L166.238439,0.624552309 L176.48928,0.624552309 C183.760225,0.624552309 187.852615,5.17724833 187.852615,11.1036026 C187.852615,14.9498458 186.144142,18.0111414 182.965586,19.7380261 Z M173.469653,15.4993091 L176.131693,15.4993091 C179.389712,15.4993091 180.58167,13.6939297 180.58167,11.1036026 C180.58167,8.51327559 179.389712,6.66864875 176.131693,6.66864875 L173.469653,6.66864875 L173.469653,15.4993091 Z M193.358327,27.3127704 L212.86671,27.3127704 L212.86671,21.3079213 L200.58954,21.3079213 L200.58954,18.5213574 L210.363597,18.5213574 L210.363597,12.8304873 L200.58954,12.8304873 L200.58954,6.62940137 L212.310462,6.62940137 L212.310462,0.624552309 L193.358327,0.624552309 L193.358327,27.3127704 Z M218.491617,27.3127704 L238,27.3127704 L238,21.3079213 L225.72283,21.3079213 L225.72283,18.5213574 L235.496888,18.5213574 L235.496888,12.8304873 L225.72283,12.8304873 L225.72283,6.62940137 L237.443753,6.62940137 L237.443753,0.624552309 L218.491617,0.624552309 L218.491617,27.3127704 Z"></path>
</g>
</g>
<path d="M298.626354,109.628474 C298.649791,109.534724 298.702525,109.493709 298.784557,109.505428 C298.866589,109.517146 298.94276,109.511287 299.013073,109.487849 C298.825572,109.300349 298.708385,109.048398 298.66151,108.73199 C298.614635,108.415582 298.497449,108.151913 298.309948,107.940974 C298.356823,107.823786 298.397838,107.7066 298.432994,107.589412 C298.468151,107.472224 298.567759,107.425349 298.731823,107.448787 C298.66151,106.933159 298.673228,106.452695 298.766979,106.007381 C298.860729,105.562066 299.007212,105.140195 299.206432,104.741756 C299.405652,104.343316 299.640024,103.950742 299.909557,103.564021 C300.17909,103.177301 300.442759,102.784726 300.700573,102.386287 C300.911511,102.339412 301.040416,102.35699 301.087291,102.439021 C301.134167,102.521053 301.216197,102.503475 301.333385,102.386287 C301.708387,102.128473 301.966197,101.841367 302.106823,101.524959 C302.247448,101.208551 302.31776,100.862851 302.31776,100.487849 C302.528699,99.8784714 302.768931,99.2749618 303.038463,98.6773026 C303.307996,98.0796433 303.61854,97.5230083 303.970104,97.0073807 C304.321668,96.4917531 304.696664,96.0405858 305.095104,95.6538651 C305.493543,95.2671444 305.927133,94.9683193 306.395885,94.7573807 C306.724012,94.4761293 307.140023,94.2183194 307.643932,93.9839432 C308.147841,93.749567 308.686898,93.5679282 309.261119,93.4390213 C309.835341,93.3101144 310.427132,93.2398026 311.03651,93.2280838 C311.645888,93.216365 312.208383,93.2808175 312.72401,93.4214432 C312.841198,93.4683184 312.91151,93.4390219 312.934948,93.3335526 C312.958385,93.2280833 313.016978,93.1753495 313.110729,93.1753495 C314.28261,93.3159752 315.331427,93.5503478 316.257213,93.8784745 C317.182999,94.2066011 317.974007,94.6636278 318.63026,95.2495682 C319.075575,95.9526967 319.497446,96.7085485 319.895885,97.5171463 C320.294325,98.3257441 320.604868,99.1694857 320.827526,100.048396 C321.050183,100.927307 321.149791,101.835501 321.126354,102.773006 C321.102916,103.71051 320.903699,104.648001 320.528698,105.585506 C319.708381,106.616761 318.712297,107.442924 317.540416,108.064021 C316.368536,108.685118 315.108782,109.200738 313.761119,109.610896 C312.413457,110.021055 311.018939,110.355036 309.577526,110.612849 C308.136112,110.870663 306.735736,111.15191 305.376354,111.456599 C305.399791,112.089415 305.399791,112.763237 305.376354,113.478084 C305.352916,114.192931 305.276745,114.907768 305.147838,115.622615 C305.018931,116.337462 304.831433,117.034721 304.585338,117.714412 C304.339243,118.394103 304.005262,119.026909 303.583385,119.612849 C303.114633,119.589412 302.62831,119.636286 302.124401,119.753474 C301.620492,119.870663 301.169325,119.987849 300.770885,120.105037 C300.583384,119.987849 300.401745,119.876522 300.225963,119.771053 C300.050181,119.665583 299.833386,119.601131 299.575573,119.577693 C299.645885,119.296442 299.581433,119.003476 299.382213,118.698787 C299.182994,118.394098 298.983777,118.095273 298.784557,117.802303 C298.585337,117.509332 298.456432,117.216367 298.397838,116.923396 C298.339244,116.630426 298.474008,116.366757 298.802135,116.132381 C298.614634,115.968317 298.520885,115.710507 298.520885,115.358943 C298.614636,115.452694 298.731822,115.499568 298.872448,115.499568 C298.825572,115.077691 298.878306,114.57379 299.030651,113.987849 C299.182995,113.401909 299.3119,112.821837 299.417369,112.247615 C299.522839,111.673393 299.540417,111.146055 299.470104,110.665584 C299.399791,110.185113 299.118544,109.839413 298.626354,109.628474 Z M307.766979,101.401912 C307.673228,101.659726 307.597057,101.888239 307.538463,102.087459 C307.479869,102.286679 307.415417,102.468317 307.345104,102.632381 C307.274791,102.796444 307.19862,102.960505 307.116588,103.124568 C307.034557,103.288632 306.946667,103.47613 306.852916,103.687068 C306.899792,103.827694 306.993541,103.933162 307.134166,104.003474 C307.274792,104.073787 307.368541,104.179255 307.415416,104.319881 C307.743543,104.155817 308.071665,104.032772 308.399791,103.95074 C308.727918,103.868708 309.05604,103.804256 309.384166,103.757381 C309.712293,103.710505 310.040415,103.651912 310.368541,103.581599 C310.696668,103.511287 311.036508,103.3941 311.388073,103.230037 C311.739637,103.065974 312.108774,102.931209 312.495494,102.82574 C312.882215,102.720271 313.263071,102.608944 313.638073,102.491756 C314.013074,102.374568 314.376352,102.239803 314.727916,102.087459 C315.079481,101.935114 315.384165,101.730038 315.641979,101.472224 C315.313852,101.167535 314.82167,100.898007 314.165416,100.663631 C313.509163,100.429255 312.800186,100.282772 312.038463,100.224178 C311.276741,100.165584 310.51503,100.218317 309.753307,100.382381 C308.991584,100.546444 308.329482,100.886284 307.766979,101.401912 Z M340.56776,108.995662 C340.544323,109.276913 340.56776,109.546442 340.638073,109.804256 C340.708385,110.062069 340.796275,110.31402 340.901744,110.560115 C341.007214,110.80621 341.106822,111.058161 341.200573,111.315974 C341.294323,111.573788 341.364635,111.831598 341.41151,112.089412 C341.458385,112.417539 341.458385,112.774957 341.41151,113.161678 C341.364635,113.548398 341.282604,113.923395 341.165416,114.286678 C341.048228,114.649961 340.895886,114.978082 340.708385,115.271053 C340.520884,115.564023 340.29823,115.780817 340.040416,115.921443 C339.71229,116.34332 339.313856,116.671442 338.845104,116.905818 C338.376352,117.140194 337.942762,117.421442 337.544323,117.749568 C337.286509,117.913632 336.999402,118.030818 336.682994,118.101131 C336.366587,118.171444 336.044324,118.241755 335.716198,118.312068 C335.458384,118.452694 335.153699,118.599177 334.802135,118.751521 C334.450571,118.903866 334.087293,119.044489 333.712291,119.173396 C333.337289,119.302303 332.962293,119.396052 332.587291,119.454646 C332.212289,119.51324 331.884168,119.530818 331.602916,119.507381 C330.899788,119.765194 330.214248,119.935115 329.546276,120.017146 C328.878304,120.099178 328.099015,120.046444 327.208385,119.858943 C326.364631,119.976131 325.585342,119.940975 324.870494,119.753474 C324.155647,119.565974 323.522841,119.267148 322.972057,118.85699 C322.421273,118.446832 321.940809,117.954649 321.530651,117.380428 C321.120492,116.806206 320.786511,116.202696 320.528698,115.569881 C320.341197,114.233937 320.388071,113.021058 320.669323,111.931209 C320.950574,110.84136 321.354867,109.833557 321.882213,108.907771 C322.40956,107.981985 323.013069,107.126525 323.69276,106.341365 C324.372451,105.556205 325.028694,104.788634 325.66151,104.038631 C325.802136,104.085506 325.913463,104.079647 325.995494,104.021053 C326.077526,103.962459 326.153697,103.880428 326.22401,103.774959 C326.294323,103.66949 326.370494,103.569881 326.452526,103.476131 C326.534557,103.38238 326.634166,103.323787 326.751354,103.300349 C326.915417,102.948785 327.155649,102.685116 327.472057,102.509334 C327.788465,102.333552 328.040415,102.081601 328.227916,101.753474 C328.438855,101.706599 328.614634,101.636287 328.75526,101.542537 C328.895886,101.448786 329.03065,101.343319 329.159557,101.226131 C329.288464,101.108943 329.423228,100.997616 329.563854,100.892146 C329.70448,100.786677 329.86854,100.710506 330.056041,100.663631 L330.056041,100.276912 C330.477918,100.089411 330.788462,99.8726163 330.987682,99.6265213 C331.186902,99.3804263 331.427134,99.0816012 331.708385,98.730037 C331.919324,98.7065993 332.089244,98.6948807 332.218151,98.6948807 C332.347058,98.6948807 332.540415,98.6714434 332.798229,98.6245682 C332.98573,98.2964416 333.15565,98.0503503 333.307994,97.886287 C333.460339,97.7222236 333.688852,97.5464441 333.993541,97.3589432 C334.274793,97.4995689 334.585337,97.593318 334.925182,97.6401932 C335.265027,97.6870684 335.563853,97.8394107 335.821666,98.0972245 C335.845104,98.3316006 335.915416,98.5132394 336.032604,98.6421463 C336.149792,98.7710532 336.278697,98.8882396 336.419323,98.9937088 C336.559948,99.0991781 336.694713,99.2105051 336.823619,99.3276932 C336.952526,99.4448813 337.040416,99.6089421 337.087291,99.8198807 C337.181042,99.8433183 337.245494,99.8315997 337.280651,99.7847245 C337.315807,99.7378492 337.38026,99.7261306 337.47401,99.7495682 C337.544323,100.077695 337.626353,100.29449 337.720104,100.399959 C337.813854,100.505428 337.907603,100.710504 338.001354,101.015193 C337.884166,101.249569 337.796276,101.489801 337.737682,101.735896 C337.679088,101.981991 337.532605,102.16363 337.298229,102.280818 C337.274791,102.444882 337.321666,102.532771 337.438854,102.54449 C337.556042,102.556209 337.626354,102.620661 337.649791,102.737849 C337.673229,102.948788 337.638073,103.10113 337.544323,103.194881 C338.106825,104.108948 338.610727,105.075735 339.056041,106.095271 C339.501356,107.114808 340.005257,108.081595 340.56776,108.995662 Z M336.173229,112.335506 C336.266979,112.077692 336.390025,111.866757 336.542369,111.702693 C336.694714,111.53863 336.782604,111.292539 336.806041,110.964412 C336.688853,110.776911 336.618541,110.630428 336.595104,110.524959 C336.571666,110.41949 336.559948,110.249569 336.559948,110.015193 C336.04432,109.288627 335.599012,108.509338 335.22401,107.677303 C334.849008,106.845267 334.427137,106.065978 333.958385,105.339412 C333.91151,105.433162 333.829479,105.526911 333.712291,105.620662 C333.595103,105.714412 333.466198,105.690975 333.325573,105.550349 C333.278697,105.73785 333.196667,105.872615 333.079479,105.954646 C332.962291,106.036678 332.833386,106.071834 332.69276,106.060115 C332.552134,106.048396 332.405652,106.01324 332.253307,105.954646 C332.100962,105.896052 331.966198,105.819881 331.84901,105.726131 C331.169319,106.265196 330.489639,106.792534 329.809948,107.308162 C329.130257,107.82379 328.520888,108.42144 327.981823,109.101131 C327.888072,109.148006 327.829479,109.165584 327.806041,109.153865 C327.782604,109.142146 327.712292,109.159724 327.595104,109.206599 C327.407603,109.651914 327.17909,110.056207 326.909557,110.41949 C326.640024,110.782773 326.376355,111.15191 326.118541,111.526912 C325.860728,111.901914 325.638074,112.300347 325.450573,112.722224 C325.263072,113.144102 325.157604,113.636284 325.134166,114.198787 C325.532606,114.526914 326.001351,114.72613 326.540416,114.796443 C327.079482,114.866756 327.636117,114.878475 328.210338,114.831599 C328.78456,114.784724 329.347054,114.708553 329.897838,114.603084 C330.448622,114.497615 330.958383,114.444881 331.427135,114.444881 C332.411515,114.210505 333.255257,113.899961 333.958385,113.51324 C334.661514,113.126519 335.399788,112.733945 336.173229,112.335506 Z M350.165416,117.081599 C350.282604,117.784728 350.241589,118.335504 350.042369,118.733943 C349.84315,119.132383 349.561903,119.431208 349.198619,119.630428 C348.835336,119.829647 348.419325,119.940974 347.950573,119.964412 C347.48182,119.98785 347.036512,119.964412 346.614635,119.894099 C346.380259,119.565973 346.169324,119.155821 345.981823,118.663631 C345.794322,118.171441 345.618542,117.66168 345.454479,117.134334 C345.290416,116.606987 345.143933,116.085508 345.015026,115.569881 C344.886119,115.054253 344.774792,114.597226 344.681041,114.198787 C344.798229,113.917536 344.874401,113.595273 344.909557,113.23199 C344.944713,112.868707 344.968151,112.49957 344.979869,112.124568 C344.991588,111.749566 345.003307,111.368711 345.015026,110.98199 C345.026745,110.595269 345.056041,110.226132 345.102916,109.874568 C345.26698,108.890188 345.507212,107.952698 345.823619,107.062068 C346.140027,106.171439 346.391978,105.245667 346.579479,104.284724 C346.626354,104.073786 346.608776,103.874569 346.526744,103.687068 C346.444713,103.499567 346.427135,103.323788 346.47401,103.159724 C346.497448,103.065974 346.56776,103.001522 346.684948,102.966365 C346.802136,102.931209 346.872448,102.855038 346.895885,102.737849 C346.966198,102.480036 346.983776,102.2691 346.948619,102.105037 C346.913463,101.940974 346.954478,101.741757 347.071666,101.507381 C347.188854,101.31988 347.335337,101.044492 347.511119,100.681209 C347.686902,100.317926 347.751354,99.9370702 347.704479,99.5386307 C347.915417,99.398005 348.114634,99.2339441 348.302135,99.0464432 C348.489636,98.8589423 348.682994,98.6890221 348.882213,98.5366776 C349.081433,98.3843331 349.304087,98.2495688 349.550182,98.1323807 C349.796277,98.0151926 350.095102,97.9565995 350.446666,97.9565995 C350.634167,98.1909756 350.757213,98.4487855 350.815807,98.730037 L350.991588,99.573787 C351.050182,99.8550384 351.138072,100.118708 351.25526,100.364803 C351.372448,100.610898 351.571665,100.804255 351.852916,100.944881 L351.852916,101.648006 C351.852916,101.929257 351.864635,102.204645 351.888073,102.474178 C351.91151,102.74371 351.964244,102.989801 352.046276,103.212459 C352.128307,103.435116 352.263072,103.581599 352.450573,103.651912 C352.028696,104.776918 351.636121,105.890188 351.272838,106.991756 C350.909555,108.093324 350.61073,109.200735 350.376354,110.314021 C350.141978,111.427308 349.995495,112.546438 349.936901,113.671443 C349.878307,114.796449 349.954478,115.933156 350.165416,117.081599 Z M361.450573,113.144099 C361.239634,113.190975 361.087292,113.31402 360.993541,113.51324 C360.899791,113.71246 360.811901,113.917536 360.729869,114.128474 C360.647838,114.339413 360.565807,114.53277 360.483776,114.708553 C360.401744,114.884335 360.278698,114.972224 360.114635,114.972224 C360.091198,115.159725 360.026745,115.323786 359.921276,115.464412 C359.815806,115.605038 359.716198,115.751521 359.622448,115.903865 C359.528697,116.05621 359.458385,116.22027 359.41151,116.396053 C359.364635,116.571835 359.388072,116.776911 359.481823,117.011287 C359.294322,117.151913 359.177135,117.351129 359.13026,117.608943 C359.083385,117.866757 359.030651,118.112848 358.972057,118.347224 C358.913463,118.581601 358.813855,118.780817 358.673229,118.944881 C358.532603,119.108944 358.274793,119.179256 357.899791,119.155818 C357.829479,119.249569 357.81776,119.308162 357.864635,119.331599 C357.91151,119.355037 357.946666,119.437067 357.970104,119.577693 C357.71229,119.530818 357.518933,119.548396 357.390026,119.630428 C357.261119,119.712459 357.102917,119.765193 356.915416,119.788631 C356.470102,119.648005 356.100965,119.401914 355.807994,119.050349 C355.515024,118.698785 355.257214,118.306211 355.034557,117.872615 C354.8119,117.439019 354.612683,116.99957 354.436901,116.554256 C354.261119,116.108941 354.091198,115.722226 353.927135,115.394099 C353.997448,115.136286 354.009167,114.884335 353.962291,114.63824 C353.915416,114.392145 353.833386,114.187069 353.716198,114.023006 C354.864641,111.585494 356.118535,108.983957 357.477916,106.218318 C358.837298,103.452679 360.126348,100.722238 361.345104,98.026912 C361.884169,98.2378505 362.417367,98.4780825 362.944713,98.7476151 C363.47206,99.0171477 363.952524,99.3276914 364.386119,99.6792557 C364.819715,100.03082 365.188852,100.435113 365.493541,100.892146 C365.79823,101.34918 365.997447,101.85894 366.091198,102.421443 C366.044322,102.562069 365.991589,102.614803 365.932994,102.579646 C365.8744,102.54449 365.821667,102.562068 365.774791,102.632381 C365.868542,102.749569 365.921276,102.831599 365.932994,102.878474 C365.944713,102.92535 365.944713,102.972224 365.932994,103.019099 C365.921276,103.065975 365.915416,103.130427 365.915416,103.212459 C365.915416,103.29449 365.950572,103.405817 366.020885,103.546443 C365.927135,103.523006 365.862682,103.534724 365.827526,103.581599 C365.792369,103.628475 365.716198,103.628475 365.59901,103.581599 C365.692761,103.839413 365.722057,104.050349 365.686901,104.214412 C365.651744,104.378475 365.59901,104.524958 365.528698,104.653865 C365.458385,104.782772 365.399792,104.923396 365.352916,105.07574 C365.306041,105.228085 365.31776,105.421442 365.388073,105.655818 C365.31776,105.655818 365.265026,105.673396 365.229869,105.708553 C365.194713,105.743709 365.165416,105.778865 365.141979,105.814021 C365.118541,105.849178 365.089245,105.884334 365.054088,105.91949 C365.018932,105.954647 364.966198,105.960506 364.895885,105.937068 C364.966198,106.452696 364.989635,106.968316 364.966198,107.483943 C364.94276,107.999571 364.925182,108.52105 364.913463,109.048396 C364.901744,109.575743 364.907604,110.126518 364.931041,110.70074 C364.954479,111.274962 365.036509,111.866753 365.177135,112.476131 C366.020889,111.983941 366.694711,111.351135 367.198619,110.577693 C367.702528,109.804252 368.11268,108.937073 368.429088,107.976131 C368.745496,107.015188 368.985728,105.983949 369.149791,104.882381 C369.313855,103.780813 369.489634,102.655824 369.677135,101.507381 C369.888074,101.296442 370.052135,101.038632 370.169323,100.733943 C370.286511,100.429254 370.391978,100.106992 370.485729,99.7671463 L370.766979,98.7476151 C370.860729,98.4077696 370.977916,98.0972259 371.118541,97.8159745 C371.470106,97.8628497 371.768931,97.9741767 372.015026,98.1499588 C372.261121,98.325741 372.489634,98.5132391 372.700573,98.7124588 C372.911511,98.9116786 373.134165,99.0991767 373.368541,99.2749588 C373.602918,99.450741 373.895883,99.562068 374.247448,99.6089432 C374.528699,100.007383 374.786509,100.394098 375.020885,100.769099 C375.255261,101.144101 375.407604,101.542535 375.477916,101.964412 C375.360728,102.151913 375.272839,102.362848 375.214244,102.597224 C375.15565,102.831601 375.091198,103.065973 375.020885,103.300349 C374.950572,103.534726 374.856823,103.75152 374.739635,103.95074 C374.622447,104.14996 374.458386,104.31988 374.247448,104.460506 C374.177135,105.069884 374.089245,105.626519 373.983776,106.130428 C373.878306,106.634336 373.772839,107.132378 373.667369,107.624568 C373.5619,108.116758 373.47401,108.626519 373.403698,109.153865 C373.333385,109.681211 373.309948,110.261284 373.333385,110.894099 C373.145884,111.433165 372.946667,112.007378 372.735729,112.616756 C372.52479,113.226134 372.360729,113.776909 372.243541,114.269099 C371.868539,114.573788 371.575574,114.937066 371.364635,115.358943 C371.153697,115.78082 370.931043,116.202691 370.696666,116.624568 C370.602916,116.718319 370.544323,116.741756 370.520885,116.694881 C370.497448,116.648005 370.415417,116.61285 370.274791,116.589412 C370.298229,116.683162 370.298229,116.753474 370.274791,116.800349 C370.251354,116.847225 370.222057,116.88824 370.186901,116.923396 C370.151744,116.958553 370.128307,117.011287 370.116588,117.081599 C370.104869,117.151912 370.122447,117.245661 370.169323,117.362849 C369.841196,117.503475 369.54823,117.702692 369.290416,117.960506 C369.032603,118.218319 368.757215,118.452692 368.464244,118.663631 C368.171274,118.874569 367.819715,119.015193 367.409557,119.085506 C366.999399,119.155819 366.466201,119.073788 365.809948,118.839412 C364.849005,118.136283 363.999404,117.327698 363.261119,116.413631 C362.522835,115.499564 361.919325,114.409731 361.450573,113.144099 Z M394.56776,102.632381 C393.98182,102.632381 393.349014,102.673396 392.669323,102.755428 C391.989632,102.837459 391.32167,102.925349 390.665416,103.019099 C390.196664,103.089412 389.745497,103.148005 389.311901,103.194881 C388.878305,103.241756 388.485731,103.276912 388.134166,103.300349 C387.970103,103.815977 387.806042,104.273004 387.641979,104.671443 C387.477916,105.069883 387.302136,105.456598 387.114635,105.831599 C386.927134,106.230039 386.757214,106.634332 386.604869,107.04449 C386.452525,107.454648 386.306042,107.894097 386.165416,108.362849 C385.93104,108.737851 385.737683,109.083551 385.585338,109.399959 C385.432994,109.716367 385.309948,110.073785 385.216198,110.472224 C384.934946,110.823789 384.724011,111.192926 384.583385,111.579646 C384.442759,111.966367 384.337292,112.300348 384.266979,112.581599 L384.126354,113.003474 C383.985728,113.1441 383.903698,113.255427 383.88026,113.337459 C383.856823,113.41949 383.798229,113.495662 383.704479,113.565974 C383.681041,113.823788 383.599011,114.081598 383.458385,114.339412 C383.41151,114.4566 383.376354,114.567927 383.352916,114.673396 C383.329479,114.778866 383.31776,114.855037 383.31776,114.901912 C383.31776,115.136288 383.259167,115.28863 383.141979,115.358943 C383.165416,115.476131 383.165416,115.599177 383.141979,115.728084 C383.118541,115.856991 383.095104,115.980036 383.071666,116.097224 C383.001354,116.378476 382.977916,116.60113 383.001354,116.765193 C383.071667,116.858944 383.136119,116.940974 383.194713,117.011287 C383.253307,117.0816 383.294323,117.175349 383.31776,117.292537 C383.458386,117.386287 383.563854,117.444881 383.634166,117.468318 C383.727917,117.538631 383.86854,117.620661 384.056041,117.714412 L384.372448,118.065974 C384.489636,118.745665 384.384168,119.284722 384.056041,119.683162 C383.704477,120.128477 383.106827,120.351131 382.263073,120.351131 L381.841198,120.351131 C381.72401,120.233943 381.653698,120.140194 381.63026,120.069881 C381.442759,119.999568 381.290417,119.940975 381.173229,119.894099 C381.056041,119.847224 380.950573,119.753475 380.856823,119.612849 C380.552134,119.472224 380.306042,119.355037 380.118541,119.261287 L379.802135,119.085506 L379.802135,118.663631 C379.638072,118.452692 379.515026,118.218319 379.432994,117.960506 C379.350963,117.702692 379.28651,117.444882 379.239635,117.187068 C379.19276,116.97613 379.140026,116.776913 379.081432,116.589412 C379.022838,116.401911 378.946667,116.23785 378.852916,116.097224 C378.806041,114.737843 378.934946,113.589417 379.239635,112.651912 C379.544324,111.714407 379.860727,110.812073 380.188854,109.944881 C380.376355,109.476128 380.563853,109.001524 380.751354,108.521053 C380.938855,108.040581 381.102916,107.54254 381.243541,107.026912 L381.559948,106.675349 C381.724011,106.300348 381.858775,105.989804 381.964244,105.743709 C382.069714,105.497614 382.181041,105.245663 382.298229,104.987849 C382.368542,104.823786 382.432994,104.665585 382.491588,104.51324 C382.550182,104.360896 382.602916,104.226131 382.649791,104.108943 C382.509166,104.108943 382.380261,104.114803 382.263073,104.126521 C382.145885,104.13824 382.028698,104.155818 381.91151,104.179256 C381.770884,104.202693 381.641979,104.220271 381.524791,104.23199 C381.407603,104.243709 381.290417,104.249568 381.173229,104.249568 C381.009166,104.249568 380.891979,104.23785 380.821666,104.214412 C380.563853,104.3316 380.282605,104.390193 379.977916,104.390193 L379.626354,104.390193 C379.556041,104.390193 379.491589,104.384334 379.432994,104.372615 C379.3744,104.360896 379.321667,104.355037 379.274791,104.355037 C379.040415,104.355037 378.852917,104.390193 378.712291,104.460506 L377.552135,104.460506 C377.50526,104.460506 377.446667,104.466365 377.376354,104.478084 C377.306041,104.489803 377.247448,104.495662 377.200573,104.495662 C377.036509,104.495662 376.86073,104.478084 376.673229,104.442928 C376.485728,104.407771 376.286511,104.3316 376.075573,104.214412 C375.794321,103.83941 375.606823,103.640193 375.513073,103.616756 L375.196666,103.194881 C375.173229,103.054255 375.138073,102.919491 375.091198,102.790584 C375.044322,102.661677 374.997448,102.515194 374.950573,102.351131 C374.856822,102.116755 374.768932,101.864804 374.686901,101.595271 C374.604869,101.325739 374.563854,101.003476 374.563854,100.628474 C374.587291,100.440974 374.634166,100.30035 374.704479,100.206599 C374.774792,100.112849 374.833385,100.030819 374.88026,99.9605057 L374.985729,99.433162 L375.44276,99.4683182 L376.427135,99.4683182 C377.177139,99.4683182 377.93885,99.4390216 378.712291,99.3804276 C379.485733,99.3218335 380.2826,99.2573811 381.102916,99.1870682 C381.571669,99.140193 382.046273,99.0933184 382.526744,99.0464432 C383.007216,98.999568 383.505258,98.9526934 384.020885,98.9058182 C384.114636,98.6948796 384.208385,98.4956629 384.302135,98.308162 L384.653698,98.1323807 C385.075575,98.1089431 385.3744,98.1616769 385.550182,98.2905838 C385.725964,98.4194907 385.872447,98.5425364 385.989635,98.6597245 C386.505263,98.6128492 387.026742,98.5601154 387.554088,98.5015213 C388.081435,98.4429273 388.614632,98.3667562 389.153698,98.2730057 C389.950577,98.1558176 390.753303,98.0503499 391.561901,97.9565995 C392.370499,97.862849 393.149788,97.8159745 393.899791,97.8159745 C394.227918,97.8159745 394.544321,97.8276931 394.84901,97.8511307 C395.153699,97.8745683 395.434946,97.9097242 395.69276,97.9565995 L396.044323,98.2026932 C396.114635,98.3433189 396.214244,98.4722239 396.343151,98.589412 C396.472058,98.7066 396.606822,98.8237864 396.747448,98.9409745 C397.028699,99.1987882 397.309946,99.5034727 397.591198,99.855037 C397.872449,100.206601 397.977917,100.722221 397.907604,101.401912 C397.720103,101.683163 397.579479,101.847224 397.485729,101.894099 L397.169323,102.315974 L396.81776,102.280818 C396.677134,102.280818 396.548229,102.298396 396.431041,102.333553 C396.313853,102.368709 396.196667,102.409724 396.079479,102.456599 C395.985728,102.503475 395.891979,102.54449 395.798229,102.579646 C395.704478,102.614803 395.599011,102.644099 395.481823,102.667537 C395.270884,102.667537 395.100964,102.661678 394.972057,102.649959 C394.84315,102.63824 394.708386,102.632381 394.56776,102.632381 Z M411.44276,99.7495682 C411.466198,99.9136315 411.472057,100.036677 411.460338,100.118709 C411.448619,100.20074 411.436901,100.276912 411.425182,100.347224 C411.413463,100.417537 411.407604,100.493708 411.407604,100.57574 C411.407604,100.657772 411.431041,100.780817 411.477916,100.944881 C410.985726,101.74176 410.417373,102.286676 409.772838,102.579646 C409.128304,102.872617 408.431045,103.083552 407.681041,103.212459 C406.931038,103.341366 406.163467,103.47613 405.378307,103.616756 C404.593147,103.757381 403.813858,104.062066 403.040416,104.530818 C402.735727,104.41363 402.460339,104.41363 402.214244,104.530818 C401.96815,104.648006 401.610731,104.683162 401.141979,104.636287 C401.001353,104.776913 400.825574,104.876521 400.614635,104.935115 C400.403697,104.993709 400.192761,105.058162 399.981823,105.128474 C400.075573,105.339413 400.116588,105.556208 400.104869,105.778865 C400.093151,106.001522 400.122447,106.183161 400.19276,106.323787 C401.013077,106.3941 401.921271,106.382381 402.917369,106.288631 C403.913468,106.19488 404.891974,106.136287 405.852916,106.112849 C405.876354,106.230038 405.864635,106.306209 405.81776,106.341365 C405.770885,106.376522 405.759166,106.440974 405.782604,106.534724 C405.946667,106.651913 406.110728,106.798395 406.274791,106.974178 C406.438855,107.14996 406.602916,107.31988 406.766979,107.483943 C406.931042,107.648007 407.100962,107.782771 407.276744,107.88824 C407.452527,107.993709 407.657603,108.034725 407.891979,108.011287 C407.985729,108.198788 408.050182,108.403864 408.085338,108.626521 C408.120495,108.849179 408.091198,109.077692 407.997448,109.312068 C407.622446,109.569882 407.247449,109.833551 406.872448,110.103084 C406.497446,110.372616 406.104872,110.612848 405.694713,110.823787 C405.284555,111.034726 404.850966,111.204646 404.393932,111.333553 C403.936898,111.462459 403.427138,111.515193 402.864635,111.491756 L402.600963,111.491756 C402.542369,111.491756 402.466198,111.4566 402.372448,111.386287 C402.184947,111.503475 401.921277,111.538631 401.581432,111.491756 C401.241587,111.44488 400.977917,111.480036 400.790416,111.597224 C400.532603,111.480036 400.222059,111.427303 399.858776,111.439021 C399.495493,111.45074 399.17323,111.409725 398.891979,111.315974 C398.516977,111.808164 398.177137,112.335503 397.872448,112.898006 C397.567759,113.460509 397.29823,114.058159 397.063854,114.690974 C397.860733,114.808163 398.522836,114.855037 399.050182,114.831599 C399.577528,114.808162 400.07557,114.767147 400.544323,114.708553 C401.013075,114.649959 401.493539,114.591365 401.985729,114.532771 C402.477919,114.474177 403.099006,114.456599 403.84901,114.480037 C404.317762,114.222223 404.874398,114.052303 405.518932,113.970271 C406.163466,113.88824 406.755257,113.753475 407.294323,113.565974 C407.481824,113.636287 407.645884,113.759333 407.78651,113.935115 C407.927136,114.110897 408.0619,114.274958 408.190807,114.427303 C408.319714,114.579647 408.454478,114.714411 408.595104,114.831599 C408.73573,114.948788 408.911509,114.995662 409.122448,114.972224 C409.216198,115.065975 409.280651,115.177302 409.315807,115.306209 C409.350963,115.435116 409.38026,115.558161 409.403698,115.675349 C409.427135,115.792538 409.46815,115.892146 409.526744,115.974178 C409.585339,116.056209 409.684947,116.085506 409.825573,116.062068 C409.474008,116.83551 409.069716,117.427301 408.612682,117.837459 C408.155648,118.247617 407.634169,118.558161 407.048229,118.769099 C406.462288,118.980038 405.811904,119.144099 405.097057,119.261287 C404.38221,119.378475 403.591202,119.519099 402.72401,119.683162 C402.513072,119.730037 402.337292,119.724178 402.196666,119.665584 C402.056041,119.60699 401.89198,119.577693 401.704479,119.577693 C401.165414,119.694881 400.520889,119.800349 399.770885,119.894099 C399.020881,119.98785 398.25917,120.023006 397.485729,119.999568 C396.712288,119.976131 395.974014,119.876522 395.270885,119.70074 C394.567757,119.524958 393.993544,119.214414 393.548229,118.769099 C393.360728,118.605036 393.237682,118.411679 393.179088,118.189021 C393.120494,117.966364 392.962293,117.796444 392.704479,117.679256 C392.681041,117.374567 392.634167,117.034726 392.563854,116.659724 C392.493541,116.284723 392.423229,115.892148 392.352916,115.48199 C392.282604,115.071832 392.22987,114.667539 392.194713,114.269099 C392.159557,113.87066 392.177135,113.507382 392.247448,113.179256 C392.31776,112.827691 392.464243,112.511288 392.686901,112.230037 C392.909558,111.948786 392.985729,111.644101 392.915416,111.315974 C393.032604,111.292537 393.102916,111.228084 393.126354,111.122615 C393.149791,111.017146 393.243541,110.976131 393.407604,110.999568 C393.54823,110.577691 393.700572,110.179258 393.864635,109.804256 C394.028698,109.429254 394.198619,109.065976 394.374401,108.714412 C394.550183,108.362848 394.725962,108.005429 394.901744,107.642146 C395.077527,107.278863 395.247447,106.87457 395.41151,106.429256 C395.083383,106.124567 394.843152,105.790586 394.690807,105.427303 C394.538462,105.06402 394.427135,104.700742 394.356823,104.337459 C394.28651,103.974176 394.227917,103.59918 394.181041,103.212459 C394.134166,102.825738 394.052136,102.433164 393.934948,102.034724 C394.169324,101.68316 394.45643,101.396054 394.796276,101.173396 C395.136121,100.950739 395.505258,100.7691 395.903698,100.628474 C396.302137,100.487849 396.735727,100.370662 397.204479,100.276912 C397.673231,100.183161 398.165414,100.077694 398.681041,99.9605057 C399.618546,99.6558167 400.456428,99.421444 401.194713,99.2573807 C401.932998,99.0933174 402.659553,98.9585531 403.374401,98.8530838 C404.089248,98.7476146 404.833381,98.6480062 405.606823,98.5542557 C406.380264,98.4605052 407.259161,98.3198816 408.243541,98.1323807 C408.45448,98.3433193 408.653697,98.448787 408.841198,98.448787 C408.934948,98.2378484 409.046275,98.1733959 409.175182,98.2554276 C409.304089,98.3374592 409.356823,98.2730068 409.333385,98.0620682 C409.567761,98.4605077 409.866586,98.7944887 410.229869,99.0640213 C410.593153,99.3335539 410.997445,99.5620673 411.44276,99.7495682 Z M416.259166,115.886287 C416.001353,116.823792 415.772839,117.532769 415.573619,118.01324 C415.3744,118.493711 415.075575,118.991753 414.677135,119.507381 C414.372446,119.460505 414.161511,119.495661 414.044323,119.612849 C413.927135,119.730038 413.79823,119.835505 413.657604,119.929256 C413.446665,119.976131 413.294323,119.976131 413.200573,119.929256 C413.106822,119.88238 413.024792,119.829647 412.954479,119.771053 C412.884166,119.712459 412.796276,119.653865 412.690807,119.595271 C412.585338,119.536677 412.427136,119.507381 412.216198,119.507381 C412.169322,119.31988 412.116589,119.1441 412.057994,118.980037 C411.9994,118.815974 411.841199,118.75738 411.583385,118.804256 C411.63026,118.616755 411.641979,118.458553 411.618541,118.329646 C411.595104,118.200739 411.565807,118.083553 411.530651,117.978084 C411.495494,117.872615 411.466198,117.767147 411.44276,117.661678 C411.419323,117.556208 411.431041,117.421444 411.477916,117.257381 C411.360728,117.257381 411.266979,117.17535 411.196666,117.011287 C411.126354,116.847224 411.044323,116.683163 410.950573,116.519099 C411.020885,116.097222 411.091197,115.698789 411.16151,115.323787 C411.231823,114.948785 411.319713,114.597226 411.425182,114.269099 C411.530651,113.940973 411.618541,113.612851 411.688854,113.284724 C411.759167,112.956598 411.724011,112.616757 411.583385,112.265193 C411.677136,112.335506 411.747447,112.317928 411.794323,112.212459 C411.841198,112.10699 411.876354,111.966366 411.899791,111.790584 C411.923229,111.614802 411.934948,111.439022 411.934948,111.26324 C411.934948,111.087458 411.923229,110.940975 411.899791,110.823787 C412.134168,110.214409 412.327525,109.587462 412.479869,108.942928 C412.632214,108.298393 412.772838,107.659728 412.901744,107.026912 C413.030651,106.394096 413.165416,105.773009 413.306041,105.163631 C413.446667,104.554253 413.634165,103.991758 413.868541,103.476131 C414.126355,103.429255 414.413462,103.458552 414.729869,103.564021 C415.046277,103.669491 415.239635,103.804255 415.309948,103.968318 C415.919326,103.499566 416.458383,102.931212 416.927135,102.26324 C417.395887,101.595268 417.876351,100.944884 418.368541,100.312068 C418.860731,99.6792525 419.405648,99.1167582 420.003307,98.6245682 C420.600966,98.1323782 421.356818,97.8394124 422.270885,97.745662 C422.739637,98.0972262 423.261117,98.4546445 423.835338,98.8179276 C424.40956,99.1812106 424.884164,99.6558153 425.259166,100.241756 C425.446667,100.335506 425.604869,100.435115 425.733776,100.540584 C425.862683,100.646053 426.020884,100.75738 426.208385,100.874568 L426.208385,101.296443 C426.489637,101.554257 426.71815,101.853082 426.893932,102.192928 C427.069714,102.532773 427.227916,102.896051 427.368541,103.282771 L427.790416,104.442928 C427.931042,104.829648 428.095103,105.198785 428.282604,105.550349 C428.235729,105.667538 428.212291,105.767146 428.212291,105.849178 C428.212291,105.931209 428.229869,106.019099 428.265026,106.112849 C428.300182,106.2066 428.329479,106.300349 428.352916,106.394099 C428.376354,106.48785 428.376354,106.616755 428.352916,106.780818 C428.282604,107.812073 427.948622,108.644096 427.350963,109.276912 C426.753304,109.909728 426.032608,110.431207 425.188854,110.841365 C424.3451,111.251523 423.442765,111.597223 422.481823,111.878474 C421.52088,112.159726 420.653701,112.46441 419.88026,112.792537 C419.88026,112.886287 419.921275,112.933162 420.003307,112.933162 C420.085339,112.933162 420.114635,112.991755 420.091198,113.108943 C420.6537,113.460507 421.099008,113.741755 421.427135,113.952693 C421.755262,114.163632 422.065806,114.339411 422.358776,114.480037 C422.651746,114.620663 422.968149,114.743708 423.307994,114.849178 C423.64784,114.954647 424.122445,115.077692 424.731823,115.218318 C425.341201,115.358944 425.815805,115.470271 426.155651,115.552303 C426.495496,115.634334 426.80604,115.704646 427.087291,115.76324 C427.368543,115.821834 427.655649,115.868709 427.948619,115.903865 C428.24159,115.939022 428.657601,115.980037 429.196666,116.026912 C429.407605,116.237851 429.589244,116.489801 429.741588,116.782771 C429.893933,117.075742 429.993541,117.368707 430.040416,117.661678 C430.087292,117.954648 430.09901,118.235895 430.075573,118.505428 C430.052135,118.77496 429.970105,118.991755 429.829479,119.155818 C429.852916,119.226131 429.90565,119.255428 429.987682,119.243709 C430.069714,119.23199 430.157603,119.237849 430.251354,119.261287 C430.110728,119.355037 429.993542,119.472224 429.899791,119.612849 L429.618541,120.034724 C429.524791,120.17535 429.419323,120.298396 429.302135,120.403865 C429.184947,120.509334 429.020886,120.573787 428.809948,120.597224 C428.083381,120.878476 427.169328,120.896054 426.06776,120.649959 C424.966192,120.403864 423.571675,119.952696 421.884166,119.296443 C421.040412,118.968317 420.354872,118.68121 419.827526,118.435115 C419.300179,118.18902 418.843153,117.942929 418.456432,117.696834 C418.069711,117.450739 417.718152,117.18707 417.401744,116.905818 C417.085337,116.624567 416.704481,116.284726 416.259166,115.886287 Z M421.28651,103.827693 C421.028696,104.202695 420.74159,104.542535 420.425182,104.847224 C420.108774,105.151913 419.80409,105.462457 419.511119,105.778865 C419.218149,106.095273 418.95448,106.446832 418.720104,106.833553 C418.485728,107.220273 418.321667,107.671441 418.227916,108.187068 C419.048233,108.093318 419.903693,107.864804 420.794323,107.501521 C421.684952,107.138238 422.528694,106.792539 423.325573,106.464412 C423.231822,105.737846 422.979872,105.151914 422.569713,104.706599 C422.159555,104.261285 421.731825,103.968319 421.28651,103.827693 Z M430.638073,103.722224 C430.802136,103.230034 431.065805,102.808164 431.429088,102.456599 C431.792371,102.105035 432.190805,101.80621 432.624401,101.560115 C433.057997,101.31402 433.509164,101.108944 433.977916,100.944881 C434.446669,100.780817 434.891977,100.640194 435.313854,100.523006 C436.251359,100.124566 437.253302,99.7437106 438.319713,99.3804276 C439.386125,99.0171445 440.475958,98.6948821 441.589244,98.4136307 C442.702531,98.1323793 443.845098,97.9507405 445.016979,97.8687088 C446.18886,97.7866772 447.419316,97.9331601 448.708385,98.308162 C448.778698,98.5425381 448.884166,98.7651921 449.024791,98.9761307 C449.165417,99.1870693 449.3119,99.3980046 449.464244,99.6089432 C449.616589,99.8198818 449.751353,100.024958 449.868541,100.224178 C449.985729,100.423397 450.056041,100.628473 450.079479,100.839412 C450.313855,101.050351 450.501353,101.278864 450.641979,101.524959 C450.782605,101.771054 450.806042,102.093316 450.712291,102.491756 C450.477915,102.679257 450.249402,102.849177 450.026744,103.001521 C449.804087,103.153866 449.563855,103.28863 449.306041,103.405818 C448.43885,103.19488 447.559952,103.124568 446.669323,103.194881 C445.778693,103.265194 444.981826,103.323787 444.278698,103.370662 C444.067759,103.159723 443.815808,103.054256 443.522838,103.054256 C443.229868,103.054256 442.925184,103.10113 442.608776,103.194881 L441.659557,103.476131 C441.343149,103.569881 441.044324,103.593318 440.763073,103.546443 C440.528696,103.733944 440.24159,103.85699 439.901744,103.915584 C439.561899,103.974178 439.192762,104.026912 438.794323,104.073787 C438.770885,104.190975 438.794322,104.267146 438.864635,104.302303 C438.934948,104.337459 438.946667,104.41363 438.899791,104.530818 C439.040417,104.694882 439.222056,104.812068 439.444713,104.882381 C439.667371,104.952694 439.901743,105.023005 440.147838,105.093318 C440.393933,105.163631 440.610728,105.251521 440.798229,105.35699 C440.98573,105.462459 441.114635,105.63238 441.184948,105.866756 C441.536512,105.866756 441.841196,105.948786 442.09901,106.112849 C442.356824,106.276913 442.567759,106.47613 442.731823,106.710506 C442.895886,106.944882 443.018932,107.196832 443.100963,107.466365 C443.182995,107.735898 443.22401,107.97613 443.22401,108.187068 C443.294323,108.374569 443.376353,108.4566 443.470104,108.433162 C443.563854,108.409724 443.669322,108.456599 443.78651,108.573787 C443.856823,108.878476 444.032602,109.18902 444.313854,109.505428 C444.595105,109.821835 444.817759,110.167535 444.981823,110.542537 C445.028698,111.128477 445.063854,111.649957 445.087291,112.10699 C445.110729,112.564024 445.028699,113.02691 444.841198,113.495662 C444.489633,114.362854 444.00331,115.136284 443.382213,115.815974 C442.761116,116.495665 442.057998,117.099175 441.272838,117.626521 C440.487678,118.153868 439.649796,118.605035 438.759166,118.980037 C437.868537,119.355039 437.001358,119.671442 436.157604,119.929256 C436.063853,119.905818 435.970104,119.905818 435.876354,119.929256 C435.782603,119.952693 435.759166,119.8941 435.806041,119.753474 C435.61854,119.917538 435.413464,120.023005 435.190807,120.069881 C434.96815,120.116756 434.727918,120.134334 434.470104,120.122615 C434.21229,120.110896 433.948621,120.093318 433.679088,120.069881 C433.409556,120.046443 433.157605,120.058162 432.923229,120.105037 C432.759166,119.940974 432.612683,119.782772 432.483776,119.630428 C432.354869,119.478083 432.25526,119.284726 432.184948,119.050349 C432.06776,119.050349 432.015026,118.991756 432.026744,118.874568 C432.038463,118.75738 431.997448,118.698787 431.903698,118.698787 C432.044323,118.464411 432.108776,118.329647 432.097057,118.29449 C432.085338,118.259334 432.050182,118.230037 431.991588,118.206599 C431.932994,118.183162 431.88026,118.153865 431.833385,118.118709 C431.78651,118.083552 431.774791,118.030819 431.798229,117.960506 C431.891979,117.773005 431.927135,117.55621 431.903698,117.310115 C431.88026,117.06402 431.856823,116.812069 431.833385,116.554256 C431.809948,116.296442 431.827525,116.050351 431.886119,115.815974 C431.944714,115.581598 432.114634,115.3941 432.395885,115.253474 C433.192764,115.347225 433.948616,115.317928 434.663463,115.165584 C435.378311,115.013239 436.052132,114.796445 436.684948,114.515193 C437.317763,114.233942 437.921273,113.929257 438.495494,113.601131 C439.069716,113.273004 439.63807,112.980038 440.200573,112.722224 C440.270885,112.511286 440.370494,112.335506 440.499401,112.194881 C440.628308,112.054255 440.763072,111.92535 440.903698,111.808162 C441.044323,111.690974 441.173228,111.562069 441.290416,111.421443 C441.407604,111.280817 441.489635,111.105038 441.53651,110.894099 C441.559948,110.730036 441.518933,110.630428 441.413463,110.595271 C441.307994,110.560115 441.25526,110.472225 441.25526,110.331599 L440.868541,110.226131 C440.423227,109.968317 439.919325,109.751522 439.356823,109.57574 C438.79432,109.399958 438.313856,109.206601 437.915416,108.995662 C437.657603,109.136288 437.417371,109.171444 437.194713,109.101131 C436.972056,109.030818 436.684949,108.960506 436.333385,108.890193 C435.536506,108.843318 434.768936,108.761288 434.030651,108.644099 C433.292366,108.526911 432.583389,108.315976 431.903698,108.011287 C431.856822,107.894099 431.798229,107.788631 431.727916,107.694881 C431.657604,107.60113 431.528699,107.577693 431.341198,107.624568 C431.200572,107.437067 431.059948,107.255428 430.919323,107.079646 C430.778697,106.903864 430.649792,106.710507 430.532604,106.499568 C430.579479,106.218317 430.614635,105.978085 430.638073,105.778865 C430.66151,105.579645 430.591198,105.386288 430.427135,105.198787 C430.520886,104.894098 430.591197,104.648007 430.638073,104.460506 C430.684948,104.273005 430.684948,104.026913 430.638073,103.722224 Z" id="Pointers" fill="#121212" mask="url(#mask-2)" transform="translate(374.539245, 106.998787) rotate(-14.000000) translate(-374.539245, -106.998787) "></path>
</g>
</g>
</svg>
""")

private let prismJsHead: [Html.ChildOf<Html.Tag.Head>] = [
  style(unsafe: """
.language-diff .token.inserted {
  background-color: #f0fff4;
  color: #22863a;
}

.language-diff .token.deleted {
  background-color: #ffeef0;
  color: #b31d28;
}
"""),
  script([src("//cdnjs.cloudflare.com/ajax/libs/prism/1.10.0/prism.min.js")]),
  script(
    """
    Prism.languages.swift=Prism.languages.extend("clike",{string:{pattern:/("|')(\\\\(?:\\((?:[^()]|\\([^)]+\\))+\\)|\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0,inside:{interpolation:{pattern:/\\\\\\((?:[^()]|\\([^)]+\\))+\\)/,inside:{delimiter:{pattern:/^\\\\\\(|\\)$/,alias:"variable"}}}}},keyword:/\\b(?:as|associativity|break|case|catch|class|continue|convenience|default|defer|deinit|didSet|do|dynamic(?:Type)?|else|enum|extension|fallthrough|final|for|func|get|guard|if|import|in|infix|init|inout|internal|is|lazy|left|let|mutating|new|none|nonmutating|operator|optional|override|postfix|precedence|prefix|private|protocol|public|repeat|required|rethrows|return|right|safe|self|Self|set|static|struct|subscript|super|switch|throws?|try|Type|typealias|unowned|unsafe|var|weak|where|while|willSet|__(?:COLUMN__|FILE__|FUNCTION__|LINE__))\\b/,number:/\\b(?:[\\d_]+(?:\\.[\\de_]+)?|0x[a-f0-9_]+(?:\\.[a-f0-9p_]+)?|0b[01_]+|0o[0-7_]+)\\b/i,constant:/\\b(?:nil|[A-Z_]{2,}|k[A-Z][A-Za-z_]+)\\b/,atrule:/@\\b(?:IB(?:Outlet|Designable|Action|Inspectable)|class_protocol|exported|noreturn|NS(?:Copying|Managed)|objc|UIApplicationMain|auto_closure)\\b/,builtin:/\\b(?:[A-Z]\\S+|abs|advance|alignof(?:Value)?|assert|contains|count(?:Elements)?|debugPrint(?:ln)?|distance|drop(?:First|Last)|dump|enumerate|equal|filter|find|first|getVaList|indices|isEmpty|join|last|lexicographicalCompare|map|max(?:Element)?|min(?:Element)?|numericCast|overlaps|partition|print(?:ln)?|reduce|reflect|reverse|sizeof(?:Value)?|sort(?:ed)?|split|startsWith|stride(?:of(?:Value)?)?|suffix|swap|toDebugString|toString|transcode|underestimateCount|unsafeBitCast|with(?:ExtendedLifetime|Unsafe(?:MutablePointers?|Pointers?)|VaList))\\b/}),Prism.languages.swift.string.inside.interpolation.inside.rest=Prism.languages.swift;
    Prism.languages.diff={coord:[/^(?:\\*{3}|-{3}|\\+{3}).*$/m,/^@@.*@@$/m,/^\\d+.*$/m],deleted:/^[-<].*$/m,inserted:/^[+>].*$/m,diff:{pattern:/^!(?!!).+$/m,alias:"important"}};
    Prism.languages.markup={comment:/<!--[\\s\\S]*?-->/,prolog:/<\\?[\\s\\S]+?\\?>/,doctype:/<!DOCTYPE[\\s\\S]+?>/i,cdata:/<!\\[CDATA\\[[\\s\\S]*?]]>/i,tag:{pattern:/<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s+[^\\s>\\/=]+(?:=(?:("|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'">=]+))?)*\\s*\\/?>/i,greedy:!0,inside:{tag:{pattern:/^<\\/?[^\\s>\\/]+/i,inside:{punctuation:/^<\\/?/,namespace:/^[^\\s>\\/:]+:/}},"attr-value":{pattern:/=(?:("|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^\\s'">=]+)/i,inside:{punctuation:[/^=/,{pattern:/(^|[^\\\\])["']/,lookbehind:!0}]}},punctuation:/\\/?>/,"attr-name":{pattern:/[^\\s>\\/]+/,inside:{namespace:/^[^\\s>\\/:]+:/}}}},entity:/&#?[\\da-z]{1,8};/i},Prism.languages.markup.tag.inside["attr-value"].inside.entity=Prism.languages.markup.entity,Prism.hooks.add("wrap",function(a){"entity"===a.type&&(a.attributes.title=a.content.replace(/&amp;/,"&"))}),Prism.languages.xml=Prism.languages.markup,Prism.languages.html=Prism.languages.markup,Prism.languages.mathml=Prism.languages.markup,Prism.languages.svg=Prism.languages.markup;
    Prism.languages.css={comment:/\\/\\*[\\s\\S]*?\\*\\//,atrule:{pattern:/@[\\w-]+?.*?(?:;|(?=\\s*\\{))/i,inside:{rule:/@[\\w-]+/}},url:/url\\((?:(["'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1|.*?)\\)/i,selector:/[^{}\\s][^{};]*?(?=\\s*\\{)/,string:{pattern:/("|')(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},property:/[-_a-z\\xA0-\\uFFFF][-\\w\\xA0-\\uFFFF]*(?=\\s*:)/i,important:/!important\\b/i,"function":/[-a-z0-9]+(?=\\()/i,punctuation:/[(){};:]/},Prism.languages.css.atrule.inside.rest=Prism.languages.css,Prism.languages.markup&&(Prism.languages.insertBefore("markup","tag",{style:{pattern:/(<style[\\s\\S]*?>)[\\s\\S]*?(?=<\\/style>)/i,lookbehind:!0,inside:Prism.languages.css,alias:"language-css",greedy:!0}}),Prism.languages.insertBefore("inside","attr-value",{"style-attr":{pattern:/\\s*style=("|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1/i,inside:{"attr-name":{pattern:/^\\s*style/i,inside:Prism.languages.markup.tag.inside},punctuation:/^\\s*=\\s*['"]|['"]\\s*$/,"attr-value":{pattern:/.+/i,inside:Prism.languages.css}},alias:"language-css"}},Prism.languages.markup.tag));
    Prism.languages.clike={comment:[{pattern:/(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,lookbehind:!0},{pattern:/(^|[^\\\\:])\\/\\/.*/,lookbehind:!0,greedy:!0}],string:{pattern:/(["'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,greedy:!0},"class-name":{pattern:/((?:\\b(?:class|interface|extends|implements|trait|instanceof|new)\\s+)|(?:catch\\s+\\())[\\w.\\\\]+/i,lookbehind:!0,inside:{punctuation:/[.\\\\]/}},keyword:/\\b(?:if|else|while|do|for|return|in|instanceof|function|new|try|throw|catch|finally|null|break|continue)\\b/,"boolean":/\\b(?:true|false)\\b/,"function":/\\w+(?=\\()/,number:/\\b0x[\\da-f]+\\b|(?:\\b\\d+\\.?\\d*|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,operator:/--?|\\+\\+?|!=?=?|<=?|>=?|==?=?|&&?|\\|\\|?|\\?|\\*|\\/|~|\\^|%/,punctuation:/[{}[\\];(),.:]/};
    """
  )
]

private func ghosterBanner<A>(_ data: SimplePageLayoutData<A>) -> [Html.Node] {
  guard data.isGhosting else { return [] }

  return [
    gridRow(
      [
        style("background: linear-gradient(to bottom, #FFF080, #79F2B0);"),
        `class`([
          Class.padding([.mobile: [.all: 4]])
          ])
      ],
      [
        gridColumn(
          sizes: [:],
          [
            div(
              [
                h3(
                  [`class`([Class.pf.type.responsiveTitle3])],
                  ["You are ghosting 👻"]
                ),
                form(
                  [
                    method(.post),
                    action(pointFreeRouter.path(to: .endGhosting))
                  ],
                  [
                    input([
                      type(.submit),
                      value("Stop ghosting"),
                      `class`([Class.pf.components.button(color: .white, size: .small)])
                      ])
                  ]
                )
              ]
            )
          ]
        )
      ]
    )
  ]
}
