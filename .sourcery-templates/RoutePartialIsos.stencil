import ApplicativeRouter
import Prelude

{% for enum in types.implementing.DerivePartialIsos|enum %}
  extension {{ enum.name }} {
    enum iso {
      {% for case in enum.cases %}
        {% if case.hasAssociatedValue %}
          {{ enum.accessLevel }} static let {{ case.name }} = parenthesize <| PartialIso(
            apply: {{ enum.name }}.{{ case.name }},
            unapply: {
              guard case let .{{ case.name }}(result) = $0 else { return nil }
              return result
          })
        {% else %}
          {{ enum.accessLevel }} static let {{ case.name }} = parenthesize <| PartialIso<Prelude.Unit, {{ enum.name }}>(
            apply: const(.some(.{{ case.name }})),
            unapply: {
              guard case .{{ case.name }} = $0 else { return nil }
              return unit
          })
        {% endif %}
      {% endfor %}
    }
  }
{% endfor %}
